
main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 00 01 20 e5 01 00 08 00 00 00 00 00 00 00 00     ... ............
 8000010:	e1 01 00 08 e1 01 00 08 e1 01 00 08 00 00 00 00     ................
	...
 800002c:	e1 01 00 08 e1 01 00 08 00 00 00 00 e1 01 00 08     ................
 800003c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800004c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800005c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800006c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800007c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800008c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800009c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 80000ac:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 80000bc:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 80000cc:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 80000dc:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 80000ec:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 80000fc:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800010c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800011c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800012c:	e1 01 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
 80001dc:	5f f8 e0 f1                                         _...

080001e0 <Default_Handler>:
#pragma weak DMA2_Channel3_IRQHandler	= Default_Handler
#pragma weak DMA2_Channel4_5_IRQHandler	= Default_Handler

void Default_Handler(void)
{
while (1) {}
 80001e0:	e7fe      	b.n	80001e0 <Default_Handler>
 80001e2:	bf00      	nop

080001e4 <Reset_Handler>:
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
		*(dst++) = 0;
}
void Reset_Handler(void) {
 80001e4:	4668      	mov	r0, sp
 80001e6:	f020 0107 	bic.w	r1, r0, #7
 80001ea:	468d      	mov	sp, r1
void __Init_Data(void) {
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 80001ec:	4814      	ldr	r0, [pc, #80]	; (8000240 <Reset_Handler+0x5c>)
 80001ee:	4915      	ldr	r1, [pc, #84]	; (8000244 <Reset_Handler+0x60>)
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
		*(dst++) = 0;
}
void Reset_Handler(void) {
 80001f0:	b508      	push	{r3, lr}
void __Init_Data(void) {
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 80001f2:	4281      	cmp	r1, r0
 80001f4:	d009      	beq.n	800020a <Reset_Handler+0x26>
		while(dst < &_edata)
 80001f6:	4b14      	ldr	r3, [pc, #80]	; (8000248 <Reset_Handler+0x64>)
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d206      	bcs.n	800020a <Reset_Handler+0x26>
			*(dst++) = *(src++);
 80001fc:	43c2      	mvns	r2, r0
 80001fe:	4413      	add	r3, r2
 8000200:	f023 0203 	bic.w	r2, r3, #3
 8000204:	3204      	adds	r2, #4
 8000206:	f001 fd55 	bl	8001cb4 <memcpy>
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
 800020a:	4810      	ldr	r0, [pc, #64]	; (800024c <Reset_Handler+0x68>)
 800020c:	4b10      	ldr	r3, [pc, #64]	; (8000250 <Reset_Handler+0x6c>)
 800020e:	4298      	cmp	r0, r3
 8000210:	d207      	bcs.n	8000222 <Reset_Handler+0x3e>
		*(dst++) = 0;
 8000212:	43c2      	mvns	r2, r0
 8000214:	4413      	add	r3, r2
 8000216:	f023 0203 	bic.w	r2, r3, #3
 800021a:	3204      	adds	r2, #4
 800021c:	2100      	movs	r1, #0
 800021e:	f001 fdbf 	bl	8001da0 <memset>
}
void Reset_Handler(void) {
	__Init_Data(); /* Initialize memory, data and bss */
	extern u32 _isr_vectors_offs; /* the offset to the vector table in ram */
	SCB->VTOR = 0x08000000 | ((u32)&_isr_vectors_offs & (u32)0x1FFFFF80); /* set interrupt vector table address */
 8000222:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <Reset_Handler+0x70>)
 8000224:	4a0c      	ldr	r2, [pc, #48]	; (8000258 <Reset_Handler+0x74>)
 8000226:	f023 4368 	bic.w	r3, r3, #3892314112	; 0xe8000000
 800022a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800022e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000232:	6093      	str	r3, [r2, #8]
	SystemInit(); /* configure the clock */
 8000234:	f000 fe20 	bl	8000e78 <SystemInit>
	main(); /* start execution of the program */
 8000238:	f000 fcce 	bl	8000bd8 <main>
	while(1) {}
 800023c:	e7fe      	b.n	800023c <Reset_Handler+0x58>
 800023e:	bf00      	nop
 8000240:	20000000 	.word	0x20000000
 8000244:	08001e40 	.word	0x08001e40
 8000248:	20000018 	.word	0x20000018
 800024c:	20000018 	.word	0x20000018
 8000250:	20000030 	.word	0x20000030
 8000254:	00000000 	.word	0x00000000
 8000258:	e000ed00 	.word	0xe000ed00

0800025c <__Init_Data>:
void __Init_Data(void) {
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 800025c:	490e      	ldr	r1, [pc, #56]	; (8000298 <__Init_Data+0x3c>)
 800025e:	480f      	ldr	r0, [pc, #60]	; (800029c <__Init_Data+0x40>)
 0, 0, 0, 0, 0,
 0, 0, 0,
 (intfunc)0xF1E0F85F
/* @0x1E0. This is for boot in RAM mode for STM32F10x High Density devices. */
};
void __Init_Data(void) {
 8000260:	b508      	push	{r3, lr}
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 8000262:	4281      	cmp	r1, r0
 8000264:	d009      	beq.n	800027a <__Init_Data+0x1e>
		while(dst < &_edata)
 8000266:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <__Init_Data+0x44>)
 8000268:	4298      	cmp	r0, r3
 800026a:	d206      	bcs.n	800027a <__Init_Data+0x1e>
			*(dst++) = *(src++);
 800026c:	43c2      	mvns	r2, r0
 800026e:	441a      	add	r2, r3
 8000270:	f022 0203 	bic.w	r2, r2, #3
 8000274:	3204      	adds	r2, #4
 8000276:	f001 fd1d 	bl	8001cb4 <memcpy>
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
 800027a:	480a      	ldr	r0, [pc, #40]	; (80002a4 <__Init_Data+0x48>)
 800027c:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <__Init_Data+0x4c>)
 800027e:	4298      	cmp	r0, r3
 8000280:	d209      	bcs.n	8000296 <__Init_Data+0x3a>
		*(dst++) = 0;
 8000282:	43c2      	mvns	r2, r0
 8000284:	441a      	add	r2, r3
 8000286:	f022 0203 	bic.w	r2, r2, #3
 800028a:	3204      	adds	r2, #4
 800028c:	2100      	movs	r1, #0
}
 800028e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000292:	f001 bd85 	b.w	8001da0 <memset>
 8000296:	bd08      	pop	{r3, pc}
 8000298:	08001e40 	.word	0x08001e40
 800029c:	20000000 	.word	0x20000000
 80002a0:	20000018 	.word	0x20000018
 80002a4:	20000018 	.word	0x20000018
 80002a8:	20000030 	.word	0x20000030

080002ac <initLED>:

unsigned char cache[14];
short GYRO_x, GYRO_y, GYRO_z;

void initLED() {
    RCC->APB2ENR |= 1<<2;
 80002ac:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <initLED+0x38>)
    GPIOA->CRH &= 0xFFFFFFF0;
 80002ae:	490e      	ldr	r1, [pc, #56]	; (80002e8 <initLED+0x3c>)

unsigned char cache[14];
short GYRO_x, GYRO_y, GYRO_z;

void initLED() {
    RCC->APB2ENR |= 1<<2;
 80002b0:	6990      	ldr	r0, [r2, #24]
    GPIOA->CRH &= 0xFFFFFFF0;
    GPIOA->CRH |= 0x00000003;

    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <initLED+0x40>)

unsigned char cache[14];
short GYRO_x, GYRO_y, GYRO_z;

void initLED() {
    RCC->APB2ENR |= 1<<2;
 80002b4:	f040 0004 	orr.w	r0, r0, #4
 80002b8:	6190      	str	r0, [r2, #24]
    GPIOA->CRH &= 0xFFFFFFF0;
 80002ba:	6848      	ldr	r0, [r1, #4]
 80002bc:	f020 000f 	bic.w	r0, r0, #15
 80002c0:	6048      	str	r0, [r1, #4]
    GPIOA->CRH |= 0x00000003;
 80002c2:	6848      	ldr	r0, [r1, #4]
 80002c4:	f040 0003 	orr.w	r0, r0, #3
 80002c8:	6048      	str	r0, [r1, #4]

    RCC->APB2ENR |= 1<<5;
 80002ca:	6991      	ldr	r1, [r2, #24]
 80002cc:	f041 0120 	orr.w	r1, r1, #32
 80002d0:	6191      	str	r1, [r2, #24]
    GPIOD->CRL &= 0xFFFFF0FF;
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80002d8:	601a      	str	r2, [r3, #0]
    GPIOD->CRL |= 0x00000300;
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	4770      	bx	lr
 80002e4:	40021000 	.word	0x40021000
 80002e8:	40010800 	.word	0x40010800
 80002ec:	40011400 	.word	0x40011400

080002f0 <delay>:
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80002f0:	f642 63e0 	movw	r3, #12000	; 0x2ee0

    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
 80002f4:	b082      	sub	sp, #8
 80002f6:	9001      	str	r0, [sp, #4]
    for(count *= 12000; count!=0; count--);
 80002f8:	9a01      	ldr	r2, [sp, #4]
 80002fa:	fb03 f302 	mul.w	r3, r3, r2
 80002fe:	9301      	str	r3, [sp, #4]
 8000300:	9b01      	ldr	r3, [sp, #4]
 8000302:	b12b      	cbz	r3, 8000310 <delay+0x20>
 8000304:	9b01      	ldr	r3, [sp, #4]
 8000306:	3b01      	subs	r3, #1
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	9b01      	ldr	r3, [sp, #4]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d1f9      	bne.n	8000304 <delay+0x14>
}
 8000310:	b002      	add	sp, #8
 8000312:	4770      	bx	lr

08000314 <IIC_init>:

void IIC_init() {
    RCC->APB2ENR |= 1<<3;
 8000314:	4914      	ldr	r1, [pc, #80]	; (8000368 <IIC_init+0x54>)
    GPIOB->CRH &= 0x0F0FFFFF;
 8000316:	4b15      	ldr	r3, [pc, #84]	; (800036c <IIC_init+0x58>)
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
}

void IIC_init() {
    RCC->APB2ENR |= 1<<3;
 8000318:	698a      	ldr	r2, [r1, #24]
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
}

void IIC_init() {
 800031a:	b410      	push	{r4}
    RCC->APB2ENR |= 1<<3;
 800031c:	f042 0208 	orr.w	r2, r2, #8
 8000320:	618a      	str	r2, [r1, #24]
    GPIOB->CRH &= 0x0F0FFFFF;
 8000322:	685a      	ldr	r2, [r3, #4]
    GPIOB->ODR |= 5<<5;

    RCC->APB2ENR |= 1<<4;
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
 8000324:	4812      	ldr	r0, [pc, #72]	; (8000370 <IIC_init+0x5c>)
    for(count *= 12000; count!=0; count--);
}

void IIC_init() {
    RCC->APB2ENR |= 1<<3;
    GPIOB->CRH &= 0x0F0FFFFF;
 8000326:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800032a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800032e:	605a      	str	r2, [r3, #4]
    GPIOB->CRH |= 0x70700000;
 8000330:	685a      	ldr	r2, [r3, #4]
    GPIOB->ODR |= 5<<5;

    RCC->APB2ENR |= 1<<4;
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
 8000332:	2400      	movs	r4, #0
}

void IIC_init() {
    RCC->APB2ENR |= 1<<3;
    GPIOB->CRH &= 0x0F0FFFFF;
    GPIOB->CRH |= 0x70700000;
 8000334:	f042 42e0 	orr.w	r2, r2, #1879048192	; 0x70000000
 8000338:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
 800033c:	605a      	str	r2, [r3, #4]
    GPIOB->ODR |= 5<<5;
 800033e:	68da      	ldr	r2, [r3, #12]
 8000340:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8000344:	60da      	str	r2, [r3, #12]

    RCC->APB2ENR |= 1<<4;
 8000346:	698a      	ldr	r2, [r1, #24]
 8000348:	f042 0210 	orr.w	r2, r2, #16
 800034c:	618a      	str	r2, [r1, #24]
    GPIOB->CRL &= 0xF0FFFFFF;
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000354:	601a      	str	r2, [r3, #0]
    GPIOB->CRL |= 0x03000000;
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800035c:	601a      	str	r2, [r3, #0]
    AD0 = 0;
 800035e:	6004      	str	r4, [r0, #0]
}
 8000360:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000
 800036c:	40010c00 	.word	0x40010c00
 8000370:	42220198 	.word	0x42220198

08000374 <IIC_Start>:
void IIC_Start() {
    SDA_OUT();
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <IIC_Start+0x3c>)
    RCC->APB2ENR |= 1<<4;
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
 8000376:	b410      	push	{r4}
    SDA_OUT();
 8000378:	685a      	ldr	r2, [r3, #4]
    SDA = 1;
 800037a:	4c0e      	ldr	r4, [pc, #56]	; (80003b4 <IIC_Start+0x40>)
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 800037c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000380:	605a      	str	r2, [r3, #4]
 8000382:	685a      	ldr	r2, [r3, #4]
    SDA = 1;
    SCL = 1;
 8000384:	480c      	ldr	r0, [pc, #48]	; (80003b8 <IIC_Start+0x44>)
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000386:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
 800038a:	605a      	str	r2, [r3, #4]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 800038c:	f64e 2260 	movw	r2, #60000	; 0xea60
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
    SDA = 1;
 8000390:	2101      	movs	r1, #1
 8000392:	6021      	str	r1, [r4, #0]
    SCL = 1;
 8000394:	6001      	str	r1, [r0, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000396:	3a01      	subs	r2, #1
 8000398:	d1fd      	bne.n	8000396 <IIC_Start+0x22>
 800039a:	f64e 2360 	movw	r3, #60000	; 0xea60
void IIC_Start() {
    SDA_OUT();
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
 800039e:	4905      	ldr	r1, [pc, #20]	; (80003b4 <IIC_Start+0x40>)
 80003a0:	600a      	str	r2, [r1, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80003a2:	3b01      	subs	r3, #1
 80003a4:	d1fd      	bne.n	80003a2 <IIC_Start+0x2e>
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
 80003a6:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <IIC_Start+0x44>)
}
 80003a8:	f85d 4b04 	ldr.w	r4, [sp], #4
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
 80003ac:	6013      	str	r3, [r2, #0]
}
 80003ae:	4770      	bx	lr
 80003b0:	40010c00 	.word	0x40010c00
 80003b4:	422181b4 	.word	0x422181b4
 80003b8:	422181bc 	.word	0x422181bc

080003bc <IIC_Stop>:
void IIC_Stop() {
    SDA_OUT();
 80003bc:	4a13      	ldr	r2, [pc, #76]	; (800040c <IIC_Stop+0x50>)
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
}
void IIC_Stop() {
 80003be:	b410      	push	{r4}
    SDA_OUT();
 80003c0:	6853      	ldr	r3, [r2, #4]
    SCL = 0;
 80003c2:	4813      	ldr	r0, [pc, #76]	; (8000410 <IIC_Stop+0x54>)
    SDA = 0;
    delay(5);
    SCL = 0;
}
void IIC_Stop() {
    SDA_OUT();
 80003c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80003c8:	6053      	str	r3, [r2, #4]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80003ca:	f64e 2360 	movw	r3, #60000	; 0xea60
    SDA = 0;
    delay(5);
    SCL = 0;
}
void IIC_Stop() {
    SDA_OUT();
 80003ce:	6851      	ldr	r1, [r2, #4]
    SCL = 0;
 80003d0:	2400      	movs	r4, #0
    SDA = 0;
    delay(5);
    SCL = 0;
}
void IIC_Stop() {
    SDA_OUT();
 80003d2:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
 80003d6:	6051      	str	r1, [r2, #4]
    SCL = 0;
 80003d8:	6004      	str	r4, [r0, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80003da:	3b01      	subs	r3, #1
 80003dc:	d1fd      	bne.n	80003da <IIC_Stop+0x1e>
 80003de:	f64e 2260 	movw	r2, #60000	; 0xea60
}
void IIC_Stop() {
    SDA_OUT();
    SCL = 0;
    delay(5);
    SDA = 0;
 80003e2:	490c      	ldr	r1, [pc, #48]	; (8000414 <IIC_Stop+0x58>)
 80003e4:	600b      	str	r3, [r1, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80003e6:	3a01      	subs	r2, #1
 80003e8:	d1fd      	bne.n	80003e6 <IIC_Stop+0x2a>
    SDA_OUT();
    SCL = 0;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 1;
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <IIC_Stop+0x54>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	601a      	str	r2, [r3, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80003f0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80003f4:	3b01      	subs	r3, #1
 80003f6:	d1fd      	bne.n	80003f4 <IIC_Stop+0x38>
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 1;
    delay(5);
    SDA = 1;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <IIC_Stop+0x58>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	601a      	str	r2, [r3, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80003fe:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000402:	3b01      	subs	r3, #1
 8000404:	d1fd      	bne.n	8000402 <IIC_Stop+0x46>
    delay(5);
    SCL = 1;
    delay(5);
    SDA = 1;
    delay(5);
}
 8000406:	f85d 4b04 	ldr.w	r4, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40010c00 	.word	0x40010c00
 8000410:	422181bc 	.word	0x422181bc
 8000414:	422181b4 	.word	0x422181b4

08000418 <IIC_Ack>:
void IIC_Ack(unsigned char ack) {
    SDA_OUT();
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <IIC_Ack+0x50>)
    SCL = 1;
    delay(5);
    SDA = 1;
    delay(5);
}
void IIC_Ack(unsigned char ack) {
 800041a:	b410      	push	{r4}
    SDA_OUT();
 800041c:	685a      	ldr	r2, [r3, #4]

    SCL = 0;
 800041e:	4913      	ldr	r1, [pc, #76]	; (800046c <IIC_Ack+0x54>)
    delay(5);
    SDA = 1;
    delay(5);
}
void IIC_Ack(unsigned char ack) {
    SDA_OUT();
 8000420:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	685a      	ldr	r2, [r3, #4]

    SCL = 0;
 8000428:	2400      	movs	r4, #0
    delay(5);
    SDA = 1;
    delay(5);
}
void IIC_Ack(unsigned char ack) {
    SDA_OUT();
 800042a:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
 800042e:	605a      	str	r2, [r3, #4]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000430:	f64e 2360 	movw	r3, #60000	; 0xea60
    delay(5);
}
void IIC_Ack(unsigned char ack) {
    SDA_OUT();

    SCL = 0;
 8000434:	600c      	str	r4, [r1, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000436:	3b01      	subs	r3, #1
 8000438:	d1fd      	bne.n	8000436 <IIC_Ack+0x1e>
 800043a:	f64e 2360 	movw	r3, #60000	; 0xea60
void IIC_Ack(unsigned char ack) {
    SDA_OUT();

    SCL = 0;
    delay(5);
    SDA = ack;
 800043e:	4a0c      	ldr	r2, [pc, #48]	; (8000470 <IIC_Ack+0x58>)
 8000440:	6010      	str	r0, [r2, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000442:	3b01      	subs	r3, #1
 8000444:	d1fd      	bne.n	8000442 <IIC_Ack+0x2a>

    SCL = 0;
    delay(5);
    SDA = ack;
    delay(5);
    SCL = 1;
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <IIC_Ack+0x54>)
 8000448:	2201      	movs	r2, #1
 800044a:	601a      	str	r2, [r3, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 800044c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000450:	3b01      	subs	r3, #1
 8000452:	d1fd      	bne.n	8000450 <IIC_Ack+0x38>
 8000454:	f64e 2260 	movw	r2, #60000	; 0xea60
    delay(5);
    SDA = ack;
    delay(5);
    SCL = 1;
    delay(5);
    SCL = 0;
 8000458:	4904      	ldr	r1, [pc, #16]	; (800046c <IIC_Ack+0x54>)
 800045a:	600b      	str	r3, [r1, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 800045c:	3a01      	subs	r2, #1
 800045e:	d1fd      	bne.n	800045c <IIC_Ack+0x44>
    delay(5);
    SCL = 1;
    delay(5);
    SCL = 0;
    delay(5);
}
 8000460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40010c00 	.word	0x40010c00
 800046c:	422181bc 	.word	0x422181bc
 8000470:	422181b4 	.word	0x422181b4

08000474 <IIC_Wait_Ack>:
unsigned char IIC_Wait_Ack() {
    SDA_IN();
 8000474:	4a19      	ldr	r2, [pc, #100]	; (80004dc <IIC_Wait_Ack+0x68>)
    SCL = 1;
    delay(5);
    SCL = 0;
    delay(5);
}
unsigned char IIC_Wait_Ack() {
 8000476:	b410      	push	{r4}
    SDA_IN();
 8000478:	6853      	ldr	r3, [r2, #4]

    SCL = 0;
 800047a:	4819      	ldr	r0, [pc, #100]	; (80004e0 <IIC_Wait_Ack+0x6c>)
    delay(5);
    SCL = 0;
    delay(5);
}
unsigned char IIC_Wait_Ack() {
    SDA_IN();
 800047c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000480:	6053      	str	r3, [r2, #4]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000482:	f64e 2360 	movw	r3, #60000	; 0xea60
    delay(5);
    SCL = 0;
    delay(5);
}
unsigned char IIC_Wait_Ack() {
    SDA_IN();
 8000486:	6851      	ldr	r1, [r2, #4]

    SCL = 0;
 8000488:	2400      	movs	r4, #0
    delay(5);
    SCL = 0;
    delay(5);
}
unsigned char IIC_Wait_Ack() {
    SDA_IN();
 800048a:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
 800048e:	6051      	str	r1, [r2, #4]

    SCL = 0;
 8000490:	6004      	str	r4, [r0, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000492:	3b01      	subs	r3, #1
 8000494:	d1fd      	bne.n	8000492 <IIC_Wait_Ack+0x1e>
unsigned char IIC_Wait_Ack() {
    SDA_IN();

    SCL = 0;
    delay(5);
    SDA = 1;
 8000496:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <IIC_Wait_Ack+0x70>)
 8000498:	2201      	movs	r2, #1
 800049a:	601a      	str	r2, [r3, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 800049c:	f64e 2360 	movw	r3, #60000	; 0xea60
 80004a0:	3b01      	subs	r3, #1
 80004a2:	d1fd      	bne.n	80004a0 <IIC_Wait_Ack+0x2c>

    SCL = 0;
    delay(5);
    SDA = 1;
    delay(5);
    SCL = 1;
 80004a4:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <IIC_Wait_Ack+0x6c>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	601a      	str	r2, [r3, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80004aa:	f64e 2360 	movw	r3, #60000	; 0xea60
 80004ae:	3b01      	subs	r3, #1
 80004b0:	d1fd      	bne.n	80004ae <IIC_Wait_Ack+0x3a>
    delay(5);
    SDA = 1;
    delay(5);
    SCL = 1;
    delay(5);
    if(READ_SDA) {
 80004b2:	4a0d      	ldr	r2, [pc, #52]	; (80004e8 <IIC_Wait_Ack+0x74>)
 80004b4:	6812      	ldr	r2, [r2, #0]
 80004b6:	b142      	cbz	r2, 80004ca <IIC_Wait_Ack+0x56>
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80004b8:	f64e 2060 	movw	r0, #60000	; 0xea60
    SDA = 1;
    delay(5);
    SCL = 1;
    delay(5);
    if(READ_SDA) {
        SCL = 0;
 80004bc:	4a08      	ldr	r2, [pc, #32]	; (80004e0 <IIC_Wait_Ack+0x6c>)
 80004be:	6013      	str	r3, [r2, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80004c0:	3801      	subs	r0, #1
 80004c2:	d1fd      	bne.n	80004c0 <IIC_Wait_Ack+0x4c>

    SCL = 0;
    LED1 = 0;
    return 1;

}
 80004c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80004c8:	4770      	bx	lr
        SCL = 0;
        delay(5);
        return 0;
    }

    SCL = 0;
 80004ca:	4905      	ldr	r1, [pc, #20]	; (80004e0 <IIC_Wait_Ack+0x6c>)
    LED1 = 0;
 80004cc:	4a07      	ldr	r2, [pc, #28]	; (80004ec <IIC_Wait_Ack+0x78>)
        SCL = 0;
        delay(5);
        return 0;
    }

    SCL = 0;
 80004ce:	600b      	str	r3, [r1, #0]
    LED1 = 0;
    return 1;
 80004d0:	2001      	movs	r0, #1
        delay(5);
        return 0;
    }

    SCL = 0;
    LED1 = 0;
 80004d2:	6013      	str	r3, [r2, #0]
    return 1;

}
 80004d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40010c00 	.word	0x40010c00
 80004e0:	422181bc 	.word	0x422181bc
 80004e4:	422181b4 	.word	0x422181b4
 80004e8:	42218134 	.word	0x42218134
 80004ec:	42228188 	.word	0x42228188

080004f0 <IIC_Send>:

void IIC_Send(unsigned char dat) {
 80004f0:	b4f0      	push	{r4, r5, r6, r7}
    unsigned char i;
    SDA_OUT();
    SCL = 0;
 80004f2:	4e14      	ldr	r6, [pc, #80]	; (8000544 <IIC_Send+0x54>)

}

void IIC_Send(unsigned char dat) {
    unsigned char i;
    SDA_OUT();
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <IIC_Send+0x58>)
    for(i = 0; i < 8; i++) {
        delay(5);
        SDA = (dat&0x80)>>7;
        dat <<= 1;
        delay(5);
        SCL = 1;
 80004f6:	4631      	mov	r1, r6

}

void IIC_Send(unsigned char dat) {
    unsigned char i;
    SDA_OUT();
 80004f8:	685a      	ldr	r2, [r3, #4]
    SCL = 0;
 80004fa:	2700      	movs	r7, #0

}

void IIC_Send(unsigned char dat) {
    unsigned char i;
    SDA_OUT();
 80004fc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	685c      	ldr	r4, [r3, #4]
    SCL = 0;
    for(i = 0; i < 8; i++) {
        delay(5);
        SDA = (dat&0x80)>>7;
 8000504:	4d11      	ldr	r5, [pc, #68]	; (800054c <IIC_Send+0x5c>)

}

void IIC_Send(unsigned char dat) {
    unsigned char i;
    SDA_OUT();
 8000506:	f444 04e0 	orr.w	r4, r4, #7340032	; 0x700000
 800050a:	605c      	str	r4, [r3, #4]
    SCL = 0;
 800050c:	2208      	movs	r2, #8
    for(i = 0; i < 8; i++) {
        delay(5);
        SDA = (dat&0x80)>>7;
        dat <<= 1;
        delay(5);
        SCL = 1;
 800050e:	2401      	movs	r4, #1
}

void IIC_Send(unsigned char dat) {
    unsigned char i;
    SDA_OUT();
    SCL = 0;
 8000510:	6037      	str	r7, [r6, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000512:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000516:	3b01      	subs	r3, #1
 8000518:	d1fd      	bne.n	8000516 <IIC_Send+0x26>
    unsigned char i;
    SDA_OUT();
    SCL = 0;
    for(i = 0; i < 8; i++) {
        delay(5);
        SDA = (dat&0x80)>>7;
 800051a:	09c3      	lsrs	r3, r0, #7
 800051c:	602b      	str	r3, [r5, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 800051e:	f64e 2360 	movw	r3, #60000	; 0xea60
    SDA_OUT();
    SCL = 0;
    for(i = 0; i < 8; i++) {
        delay(5);
        SDA = (dat&0x80)>>7;
        dat <<= 1;
 8000522:	0040      	lsls	r0, r0, #1
 8000524:	b2c0      	uxtb	r0, r0
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000526:	3b01      	subs	r3, #1
 8000528:	d1fd      	bne.n	8000526 <IIC_Send+0x36>
 800052a:	f64e 2360 	movw	r3, #60000	; 0xea60
    for(i = 0; i < 8; i++) {
        delay(5);
        SDA = (dat&0x80)>>7;
        dat <<= 1;
        delay(5);
        SCL = 1;
 800052e:	600c      	str	r4, [r1, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000530:	3b01      	subs	r3, #1
 8000532:	d1fd      	bne.n	8000530 <IIC_Send+0x40>
 8000534:	3a01      	subs	r2, #1

void IIC_Send(unsigned char dat) {
    unsigned char i;
    SDA_OUT();
    SCL = 0;
    for(i = 0; i < 8; i++) {
 8000536:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
        SDA = (dat&0x80)>>7;
        dat <<= 1;
        delay(5);
        SCL = 1;
        delay(5);
        SCL = 0;
 800053a:	600b      	str	r3, [r1, #0]

void IIC_Send(unsigned char dat) {
    unsigned char i;
    SDA_OUT();
    SCL = 0;
    for(i = 0; i < 8; i++) {
 800053c:	d1e9      	bne.n	8000512 <IIC_Send+0x22>
        delay(5);
        SCL = 1;
        delay(5);
        SCL = 0;
    }
}
 800053e:	bcf0      	pop	{r4, r5, r6, r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	422181bc 	.word	0x422181bc
 8000548:	40010c00 	.word	0x40010c00
 800054c:	422181b4 	.word	0x422181b4

08000550 <IIC_Read>:

unsigned char IIC_Read() {
 8000550:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char i, dat = 0;
 8000552:	2000      	movs	r0, #0
    SDA_IN();
    SDA = 1;
 8000554:	2701      	movs	r7, #1
    for(i = 0; i < 8; i++) {
        SCL = 0;
        delay(5);
        SCL = 1;
 8000556:	463e      	mov	r6, r7
unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
        SCL = 0;
 8000558:	4605      	mov	r5, r0
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
 800055a:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <IIC_Read+0x58>)
    SDA = 1;
 800055c:	f8df e054 	ldr.w	lr, [pc, #84]	; 80005b4 <IIC_Read+0x64>
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
 8000560:	685a      	ldr	r2, [r3, #4]
    SDA = 1;
    for(i = 0; i < 8; i++) {
        SCL = 0;
 8000562:	4912      	ldr	r1, [pc, #72]	; (80005ac <IIC_Read+0x5c>)
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
 8000564:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	685a      	ldr	r2, [r3, #4]
        SCL = 0;
        delay(5);
        SCL = 1;
        delay(5);
        dat<<=1;
        dat |= READ_SDA;
 800056c:	4c10      	ldr	r4, [pc, #64]	; (80005b0 <IIC_Read+0x60>)
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
 800056e:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
 8000572:	605a      	str	r2, [r3, #4]
    SDA = 1;
 8000574:	2208      	movs	r2, #8
 8000576:	f8ce 7000 	str.w	r7, [lr]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 800057a:	f64e 2360 	movw	r3, #60000	; 0xea60
unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
        SCL = 0;
 800057e:	600d      	str	r5, [r1, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000580:	3b01      	subs	r3, #1
 8000582:	d1fd      	bne.n	8000580 <IIC_Read+0x30>
 8000584:	f64e 2360 	movw	r3, #60000	; 0xea60
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
        SCL = 0;
        delay(5);
        SCL = 1;
 8000588:	600e      	str	r6, [r1, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 800058a:	3b01      	subs	r3, #1
 800058c:	d1fd      	bne.n	800058a <IIC_Read+0x3a>
    for(i = 0; i < 8; i++) {
        SCL = 0;
        delay(5);
        SCL = 1;
        delay(5);
        dat<<=1;
 800058e:	0040      	lsls	r0, r0, #1
        dat |= READ_SDA;
 8000590:	6823      	ldr	r3, [r4, #0]
    for(i = 0; i < 8; i++) {
        SCL = 0;
        delay(5);
        SCL = 1;
        delay(5);
        dat<<=1;
 8000592:	b2c0      	uxtb	r0, r0
 8000594:	3a01      	subs	r2, #1
        dat |= READ_SDA;
 8000596:	4318      	orrs	r0, r3

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
 8000598:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
        SCL = 0;
        delay(5);
        SCL = 1;
        delay(5);
        dat<<=1;
        dat |= READ_SDA;
 800059c:	b2c0      	uxtb	r0, r0

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
 800059e:	d1ec      	bne.n	800057a <IIC_Read+0x2a>
        SCL = 1;
        delay(5);
        dat<<=1;
        dat |= READ_SDA;
    }
    SCL = 0;
 80005a0:	4b02      	ldr	r3, [pc, #8]	; (80005ac <IIC_Read+0x5c>)
 80005a2:	601a      	str	r2, [r3, #0]
    return dat;
}
 80005a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40010c00 	.word	0x40010c00
 80005ac:	422181bc 	.word	0x422181bc
 80005b0:	42218134 	.word	0x42218134
 80005b4:	422181b4 	.word	0x422181b4

080005b8 <MPU_Sigle_Write>:

void sendData_uart(unsigned char data);
void MPU_Sigle_Write(unsigned char reg_addr, unsigned char reg_data) {
 80005b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <MPU_Sigle_Write+0x74>)
    SCL = 0;
    return dat;
}

void sendData_uart(unsigned char data);
void MPU_Sigle_Write(unsigned char reg_addr, unsigned char reg_data) {
 80005bc:	4606      	mov	r6, r0
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 80005be:	685a      	ldr	r2, [r3, #4]
    SCL = 0;
    return dat;
}

void sendData_uart(unsigned char data);
void MPU_Sigle_Write(unsigned char reg_addr, unsigned char reg_data) {
 80005c0:	460d      	mov	r5, r1
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 80005c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	685a      	ldr	r2, [r3, #4]
    SDA = 1;
 80005ca:	f8df e068 	ldr.w	lr, [pc, #104]	; 8000634 <MPU_Sigle_Write+0x7c>
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 80005ce:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
 80005d2:	605a      	str	r2, [r3, #4]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80005d4:	f64e 2260 	movw	r2, #60000	; 0xea60
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
    SDA = 1;
    SCL = 1;
 80005d8:	4f15      	ldr	r7, [pc, #84]	; (8000630 <MPU_Sigle_Write+0x78>)
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
    SDA = 1;
 80005da:	2401      	movs	r4, #1
 80005dc:	f8ce 4000 	str.w	r4, [lr]
    SCL = 1;
 80005e0:	603c      	str	r4, [r7, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80005e2:	3a01      	subs	r2, #1
 80005e4:	d1fd      	bne.n	80005e2 <MPU_Sigle_Write+0x2a>
 80005e6:	f64e 2360 	movw	r3, #60000	; 0xea60
void IIC_Start() {
    SDA_OUT();
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
 80005ea:	4912      	ldr	r1, [pc, #72]	; (8000634 <MPU_Sigle_Write+0x7c>)
 80005ec:	600a      	str	r2, [r1, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80005ee:	3b01      	subs	r3, #1
 80005f0:	d1fd      	bne.n	80005ee <MPU_Sigle_Write+0x36>
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
 80005f2:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <MPU_Sigle_Write+0x78>)
}

void sendData_uart(unsigned char data);
void MPU_Sigle_Write(unsigned char reg_addr, unsigned char reg_data) {
    IIC_Start();
    IIC_Send(MPU6050_ADDR);
 80005f4:	20d0      	movs	r0, #208	; 0xd0
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
 80005f6:	6013      	str	r3, [r2, #0]
}

void sendData_uart(unsigned char data);
void MPU_Sigle_Write(unsigned char reg_addr, unsigned char reg_data) {
    IIC_Start();
    IIC_Send(MPU6050_ADDR);
 80005f8:	f7ff ff7a 	bl	80004f0 <IIC_Send>
    if(!IIC_Wait_Ack()) LED1 = 1;
 80005fc:	f7ff ff3a 	bl	8000474 <IIC_Wait_Ack>
 8000600:	b910      	cbnz	r0, 8000608 <MPU_Sigle_Write+0x50>
 8000602:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <MPU_Sigle_Write+0x80>)
 8000604:	2201      	movs	r2, #1
 8000606:	601a      	str	r2, [r3, #0]

    IIC_Send(reg_addr);
 8000608:	4630      	mov	r0, r6
 800060a:	f7ff ff71 	bl	80004f0 <IIC_Send>
    IIC_Wait_Ack();
 800060e:	f7ff ff31 	bl	8000474 <IIC_Wait_Ack>

    IIC_Send(reg_data);
 8000612:	4628      	mov	r0, r5
 8000614:	f7ff ff6c 	bl	80004f0 <IIC_Send>
    IIC_Wait_Ack();
 8000618:	f7ff ff2c 	bl	8000474 <IIC_Wait_Ack>

    IIC_Stop();
 800061c:	f7ff fece 	bl	80003bc <IIC_Stop>
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000620:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000624:	3b01      	subs	r3, #1
 8000626:	d1fd      	bne.n	8000624 <MPU_Sigle_Write+0x6c>
    IIC_Wait_Ack();

    IIC_Stop();

    delay(5);
}
 8000628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800062a:	bf00      	nop
 800062c:	40010c00 	.word	0x40010c00
 8000630:	422181bc 	.word	0x422181bc
 8000634:	422181b4 	.word	0x422181b4
 8000638:	42228188 	.word	0x42228188

0800063c <MPU_Sigle_Read>:
unsigned char MPU_Sigle_Read(unsigned reg_addr) {
 800063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 800063e:	4b38      	ldr	r3, [pc, #224]	; (8000720 <MPU_Sigle_Read+0xe4>)

    IIC_Stop();

    delay(5);
}
unsigned char MPU_Sigle_Read(unsigned reg_addr) {
 8000640:	4605      	mov	r5, r0
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000642:	685a      	ldr	r2, [r3, #4]
    SDA = 1;
 8000644:	4e37      	ldr	r6, [pc, #220]	; (8000724 <MPU_Sigle_Read+0xe8>)
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000646:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	685a      	ldr	r2, [r3, #4]
    SDA = 1;
    SCL = 1;
 800064e:	4c36      	ldr	r4, [pc, #216]	; (8000728 <MPU_Sigle_Read+0xec>)
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000650:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
 8000654:	605a      	str	r2, [r3, #4]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000656:	f64e 2260 	movw	r2, #60000	; 0xea60
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
    SDA = 1;
 800065a:	2101      	movs	r1, #1
 800065c:	6031      	str	r1, [r6, #0]
    SCL = 1;
 800065e:	6021      	str	r1, [r4, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000660:	3a01      	subs	r2, #1
 8000662:	d1fd      	bne.n	8000660 <MPU_Sigle_Read+0x24>
 8000664:	f64e 2360 	movw	r3, #60000	; 0xea60
void IIC_Start() {
    SDA_OUT();
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
 8000668:	492e      	ldr	r1, [pc, #184]	; (8000724 <MPU_Sigle_Read+0xe8>)
 800066a:	600a      	str	r2, [r1, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 800066c:	3b01      	subs	r3, #1
 800066e:	d1fd      	bne.n	800066c <MPU_Sigle_Read+0x30>
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
 8000670:	4c2d      	ldr	r4, [pc, #180]	; (8000728 <MPU_Sigle_Read+0xec>)
    delay(5);
}
unsigned char MPU_Sigle_Read(unsigned reg_addr) {
    unsigned char reg_data;
    IIC_Start();
    IIC_Send(MPU6050_ADDR);
 8000672:	20d0      	movs	r0, #208	; 0xd0
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
 8000674:	6023      	str	r3, [r4, #0]
    delay(5);
}
unsigned char MPU_Sigle_Read(unsigned reg_addr) {
    unsigned char reg_data;
    IIC_Start();
    IIC_Send(MPU6050_ADDR);
 8000676:	f7ff ff3b 	bl	80004f0 <IIC_Send>
    IIC_Wait_Ack();
 800067a:	f7ff fefb 	bl	8000474 <IIC_Wait_Ack>

    IIC_Send(reg_addr);
 800067e:	b2e8      	uxtb	r0, r5
 8000680:	f7ff ff36 	bl	80004f0 <IIC_Send>
    IIC_Wait_Ack();
 8000684:	f7ff fef6 	bl	8000474 <IIC_Wait_Ack>
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000688:	4b25      	ldr	r3, [pc, #148]	; (8000720 <MPU_Sigle_Read+0xe4>)
    SDA = 1;
 800068a:	4d26      	ldr	r5, [pc, #152]	; (8000724 <MPU_Sigle_Read+0xe8>)
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 800068c:	685a      	ldr	r2, [r3, #4]
    SDA = 1;
 800068e:	2001      	movs	r0, #1
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000690:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000694:	605a      	str	r2, [r3, #4]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000696:	f64e 2260 	movw	r2, #60000	; 0xea60
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 800069a:	6859      	ldr	r1, [r3, #4]
 800069c:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
 80006a0:	6059      	str	r1, [r3, #4]
    SDA = 1;
 80006a2:	6028      	str	r0, [r5, #0]
    SCL = 1;
 80006a4:	6020      	str	r0, [r4, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80006a6:	3a01      	subs	r2, #1
 80006a8:	d1fd      	bne.n	80006a6 <MPU_Sigle_Read+0x6a>
 80006aa:	f64e 2360 	movw	r3, #60000	; 0xea60
void IIC_Start() {
    SDA_OUT();
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
 80006ae:	491d      	ldr	r1, [pc, #116]	; (8000724 <MPU_Sigle_Read+0xe8>)
 80006b0:	600a      	str	r2, [r1, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80006b2:	3b01      	subs	r3, #1
 80006b4:	d1fd      	bne.n	80006b2 <MPU_Sigle_Read+0x76>
        SCL = 0;
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
 80006b6:	461c      	mov	r4, r3
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
        SCL = 0;
 80006b8:	4627      	mov	r7, r4
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
 80006ba:	4e1b      	ldr	r6, [pc, #108]	; (8000728 <MPU_Sigle_Read+0xec>)

    IIC_Send(reg_addr);
    IIC_Wait_Ack();

    IIC_Start();
    IIC_Send(MPU6050_ADDR+1);
 80006bc:	20d1      	movs	r0, #209	; 0xd1
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
 80006be:	6033      	str	r3, [r6, #0]

    IIC_Send(reg_addr);
    IIC_Wait_Ack();

    IIC_Start();
    IIC_Send(MPU6050_ADDR+1);
 80006c0:	f7ff ff16 	bl	80004f0 <IIC_Send>
    IIC_Wait_Ack();
 80006c4:	f7ff fed6 	bl	8000474 <IIC_Wait_Ack>
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MPU_Sigle_Read+0xe4>)
    SDA = 1;
 80006ca:	4916      	ldr	r1, [pc, #88]	; (8000724 <MPU_Sigle_Read+0xe8>)
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
 80006cc:	685a      	ldr	r2, [r3, #4]
    SDA = 1;
 80006ce:	2501      	movs	r5, #1
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
 80006d0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	685a      	ldr	r2, [r3, #4]
    SDA = 1;
    for(i = 0; i < 8; i++) {
        SCL = 0;
 80006d8:	4630      	mov	r0, r6
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
 80006da:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
 80006de:	605a      	str	r2, [r3, #4]
        SCL = 0;
        delay(5);
        SCL = 1;
        delay(5);
        dat<<=1;
        dat |= READ_SDA;
 80006e0:	3e88      	subs	r6, #136	; 0x88
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
    SDA = 1;
 80006e2:	600d      	str	r5, [r1, #0]
 80006e4:	2208      	movs	r2, #8
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80006e6:	f64e 2360 	movw	r3, #60000	; 0xea60
unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
        SCL = 0;
 80006ea:	6007      	str	r7, [r0, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80006ec:	3b01      	subs	r3, #1
 80006ee:	d1fd      	bne.n	80006ec <MPU_Sigle_Read+0xb0>
 80006f0:	f64e 2360 	movw	r3, #60000	; 0xea60
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
        SCL = 0;
        delay(5);
        SCL = 1;
 80006f4:	6005      	str	r5, [r0, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80006f6:	3b01      	subs	r3, #1
 80006f8:	d1fd      	bne.n	80006f6 <MPU_Sigle_Read+0xba>
    for(i = 0; i < 8; i++) {
        SCL = 0;
        delay(5);
        SCL = 1;
        delay(5);
        dat<<=1;
 80006fa:	0064      	lsls	r4, r4, #1
        dat |= READ_SDA;
 80006fc:	6831      	ldr	r1, [r6, #0]
    for(i = 0; i < 8; i++) {
        SCL = 0;
        delay(5);
        SCL = 1;
        delay(5);
        dat<<=1;
 80006fe:	b2e4      	uxtb	r4, r4
 8000700:	1e53      	subs	r3, r2, #1
        dat |= READ_SDA;
 8000702:	430c      	orrs	r4, r1

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
 8000704:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
        SCL = 0;
        delay(5);
        SCL = 1;
        delay(5);
        dat<<=1;
        dat |= READ_SDA;
 8000708:	b2e4      	uxtb	r4, r4

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
 800070a:	d1ec      	bne.n	80006e6 <MPU_Sigle_Read+0xaa>
        SCL = 1;
        delay(5);
        dat<<=1;
        dat |= READ_SDA;
    }
    SCL = 0;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MPU_Sigle_Read+0xec>)
    IIC_Start();
    IIC_Send(MPU6050_ADDR+1);
    IIC_Wait_Ack();

    reg_data = IIC_Read();
    IIC_Ack(1);
 800070e:	2001      	movs	r0, #1
        SCL = 1;
        delay(5);
        dat<<=1;
        dat |= READ_SDA;
    }
    SCL = 0;
 8000710:	601a      	str	r2, [r3, #0]
    IIC_Start();
    IIC_Send(MPU6050_ADDR+1);
    IIC_Wait_Ack();

    reg_data = IIC_Read();
    IIC_Ack(1);
 8000712:	f7ff fe81 	bl	8000418 <IIC_Ack>
    IIC_Stop();
 8000716:	f7ff fe51 	bl	80003bc <IIC_Stop>
    return reg_data;
}
 800071a:	4620      	mov	r0, r4
 800071c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800071e:	bf00      	nop
 8000720:	40010c00 	.word	0x40010c00
 8000724:	422181b4 	.word	0x422181b4
 8000728:	422181bc 	.word	0x422181bc

0800072c <MPU_GetData>:
short MPU_GetData(unsigned char REG_Addr) {
 800072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 800072e:	4b71      	ldr	r3, [pc, #452]	; (80008f4 <MPU_GetData+0x1c8>)
    reg_data = IIC_Read();
    IIC_Ack(1);
    IIC_Stop();
    return reg_data;
}
short MPU_GetData(unsigned char REG_Addr) {
 8000730:	4604      	mov	r4, r0
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000732:	685a      	ldr	r2, [r3, #4]
    SDA = 1;
 8000734:	4e70      	ldr	r6, [pc, #448]	; (80008f8 <MPU_GetData+0x1cc>)
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000736:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	685a      	ldr	r2, [r3, #4]
    SDA = 1;
    SCL = 1;
 800073e:	4d6f      	ldr	r5, [pc, #444]	; (80008fc <MPU_GetData+0x1d0>)
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000740:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
 8000744:	605a      	str	r2, [r3, #4]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000746:	f64e 2260 	movw	r2, #60000	; 0xea60
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
    SDA = 1;
 800074a:	2101      	movs	r1, #1
 800074c:	6031      	str	r1, [r6, #0]
    SCL = 1;
 800074e:	6029      	str	r1, [r5, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000750:	3a01      	subs	r2, #1
 8000752:	d1fd      	bne.n	8000750 <MPU_GetData+0x24>
 8000754:	f64e 2360 	movw	r3, #60000	; 0xea60
void IIC_Start() {
    SDA_OUT();
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
 8000758:	4967      	ldr	r1, [pc, #412]	; (80008f8 <MPU_GetData+0x1cc>)
 800075a:	600a      	str	r2, [r1, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 800075c:	3b01      	subs	r3, #1
 800075e:	d1fd      	bne.n	800075c <MPU_GetData+0x30>
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
 8000760:	4d66      	ldr	r5, [pc, #408]	; (80008fc <MPU_GetData+0x1d0>)
    delay(5);
}
unsigned char MPU_Sigle_Read(unsigned reg_addr) {
    unsigned char reg_data;
    IIC_Start();
    IIC_Send(MPU6050_ADDR);
 8000762:	20d0      	movs	r0, #208	; 0xd0
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
 8000764:	602b      	str	r3, [r5, #0]
    delay(5);
}
unsigned char MPU_Sigle_Read(unsigned reg_addr) {
    unsigned char reg_data;
    IIC_Start();
    IIC_Send(MPU6050_ADDR);
 8000766:	f7ff fec3 	bl	80004f0 <IIC_Send>
    IIC_Wait_Ack();
 800076a:	f7ff fe83 	bl	8000474 <IIC_Wait_Ack>

    IIC_Send(reg_addr);
 800076e:	4620      	mov	r0, r4
 8000770:	f7ff febe 	bl	80004f0 <IIC_Send>
    IIC_Wait_Ack();
 8000774:	f7ff fe7e 	bl	8000474 <IIC_Wait_Ack>
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000778:	4b5e      	ldr	r3, [pc, #376]	; (80008f4 <MPU_GetData+0x1c8>)
    SDA = 1;
 800077a:	4e5f      	ldr	r6, [pc, #380]	; (80008f8 <MPU_GetData+0x1cc>)
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 800077c:	685a      	ldr	r2, [r3, #4]
    SDA = 1;
 800077e:	2001      	movs	r0, #1
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000780:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000784:	605a      	str	r2, [r3, #4]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000786:	f64e 2260 	movw	r2, #60000	; 0xea60
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 800078a:	6859      	ldr	r1, [r3, #4]
 800078c:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
 8000790:	6059      	str	r1, [r3, #4]
    SDA = 1;
 8000792:	6030      	str	r0, [r6, #0]
    SCL = 1;
 8000794:	6028      	str	r0, [r5, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000796:	3a01      	subs	r2, #1
 8000798:	d1fd      	bne.n	8000796 <MPU_GetData+0x6a>
 800079a:	f64e 2360 	movw	r3, #60000	; 0xea60
void IIC_Start() {
    SDA_OUT();
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
 800079e:	4956      	ldr	r1, [pc, #344]	; (80008f8 <MPU_GetData+0x1cc>)
 80007a0:	600a      	str	r2, [r1, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80007a2:	3b01      	subs	r3, #1
 80007a4:	d1fd      	bne.n	80007a2 <MPU_GetData+0x76>
        SCL = 0;
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
 80007a6:	461d      	mov	r5, r3
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
 80007a8:	4f54      	ldr	r7, [pc, #336]	; (80008fc <MPU_GetData+0x1d0>)

    IIC_Send(reg_addr);
    IIC_Wait_Ack();

    IIC_Start();
    IIC_Send(MPU6050_ADDR+1);
 80007aa:	20d1      	movs	r0, #209	; 0xd1
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
 80007ac:	603b      	str	r3, [r7, #0]

    IIC_Send(reg_addr);
    IIC_Wait_Ack();

    IIC_Start();
    IIC_Send(MPU6050_ADDR+1);
 80007ae:	f7ff fe9f 	bl	80004f0 <IIC_Send>
    IIC_Wait_Ack();
 80007b2:	f7ff fe5f 	bl	8000474 <IIC_Wait_Ack>
unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
        SCL = 0;
 80007b6:	4638      	mov	r0, r7
 80007b8:	462f      	mov	r7, r5
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
 80007ba:	4b4e      	ldr	r3, [pc, #312]	; (80008f4 <MPU_GetData+0x1c8>)
    SDA = 1;
 80007bc:	494e      	ldr	r1, [pc, #312]	; (80008f8 <MPU_GetData+0x1cc>)
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
 80007be:	685a      	ldr	r2, [r3, #4]
    SDA = 1;
 80007c0:	2601      	movs	r6, #1
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
 80007c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	685a      	ldr	r2, [r3, #4]
        SCL = 0;
        delay(5);
        SCL = 1;
        delay(5);
        dat<<=1;
        dat |= READ_SDA;
 80007ca:	f8df e134 	ldr.w	lr, [pc, #308]	; 8000900 <MPU_GetData+0x1d4>
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
 80007ce:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
 80007d2:	605a      	str	r2, [r3, #4]
    SDA = 1;
 80007d4:	600e      	str	r6, [r1, #0]
 80007d6:	2208      	movs	r2, #8
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80007d8:	f64e 2360 	movw	r3, #60000	; 0xea60
unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
        SCL = 0;
 80007dc:	6007      	str	r7, [r0, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80007de:	3b01      	subs	r3, #1
 80007e0:	d1fd      	bne.n	80007de <MPU_GetData+0xb2>
 80007e2:	f64e 2360 	movw	r3, #60000	; 0xea60
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
        SCL = 0;
        delay(5);
        SCL = 1;
 80007e6:	6006      	str	r6, [r0, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80007e8:	3b01      	subs	r3, #1
 80007ea:	d1fd      	bne.n	80007e8 <MPU_GetData+0xbc>
    for(i = 0; i < 8; i++) {
        SCL = 0;
        delay(5);
        SCL = 1;
        delay(5);
        dat<<=1;
 80007ec:	006d      	lsls	r5, r5, #1
        dat |= READ_SDA;
 80007ee:	f8de 1000 	ldr.w	r1, [lr]
    for(i = 0; i < 8; i++) {
        SCL = 0;
        delay(5);
        SCL = 1;
        delay(5);
        dat<<=1;
 80007f2:	b2ed      	uxtb	r5, r5
 80007f4:	1e53      	subs	r3, r2, #1
        dat |= READ_SDA;
 80007f6:	430d      	orrs	r5, r1

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
 80007f8:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
        SCL = 0;
        delay(5);
        SCL = 1;
        delay(5);
        dat<<=1;
        dat |= READ_SDA;
 80007fc:	b2ed      	uxtb	r5, r5

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
 80007fe:	d1eb      	bne.n	80007d8 <MPU_GetData+0xac>
        SCL = 1;
        delay(5);
        dat<<=1;
        dat |= READ_SDA;
    }
    SCL = 0;
 8000800:	4e3e      	ldr	r6, [pc, #248]	; (80008fc <MPU_GetData+0x1d0>)
    IIC_Start();
    IIC_Send(MPU6050_ADDR+1);
    IIC_Wait_Ack();

    reg_data = IIC_Read();
    IIC_Ack(1);
 8000802:	2001      	movs	r0, #1
        SCL = 1;
        delay(5);
        dat<<=1;
        dat |= READ_SDA;
    }
    SCL = 0;
 8000804:	6032      	str	r2, [r6, #0]
    IIC_Start();
    IIC_Send(MPU6050_ADDR+1);
    IIC_Wait_Ack();

    reg_data = IIC_Read();
    IIC_Ack(1);
 8000806:	f7ff fe07 	bl	8000418 <IIC_Ack>
    IIC_Stop();
 800080a:	f7ff fdd7 	bl	80003bc <IIC_Stop>
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 800080e:	4b39      	ldr	r3, [pc, #228]	; (80008f4 <MPU_GetData+0x1c8>)
    SDA = 1;
 8000810:	4839      	ldr	r0, [pc, #228]	; (80008f8 <MPU_GetData+0x1cc>)
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000812:	685a      	ldr	r2, [r3, #4]
    SDA = 1;
 8000814:	2101      	movs	r1, #1
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000816:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	685a      	ldr	r2, [r3, #4]
    return reg_data;
}
short MPU_GetData(unsigned char REG_Addr) {
    unsigned char H, L;
    H = MPU_Sigle_Read(REG_Addr);
    L = MPU_Sigle_Read(REG_Addr+1);
 800081e:	440c      	add	r4, r1
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000820:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
 8000824:	605a      	str	r2, [r3, #4]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000826:	f64e 2260 	movw	r2, #60000	; 0xea60
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
    SDA = 1;
 800082a:	6001      	str	r1, [r0, #0]
    SCL = 1;
 800082c:	6031      	str	r1, [r6, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 800082e:	3a01      	subs	r2, #1
 8000830:	d1fd      	bne.n	800082e <MPU_GetData+0x102>
 8000832:	f64e 2360 	movw	r3, #60000	; 0xea60
void IIC_Start() {
    SDA_OUT();
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
 8000836:	4930      	ldr	r1, [pc, #192]	; (80008f8 <MPU_GetData+0x1cc>)
 8000838:	600a      	str	r2, [r1, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 800083a:	3b01      	subs	r3, #1
 800083c:	d1fd      	bne.n	800083a <MPU_GetData+0x10e>
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
 800083e:	4e2f      	ldr	r6, [pc, #188]	; (80008fc <MPU_GetData+0x1d0>)
    delay(5);
}
unsigned char MPU_Sigle_Read(unsigned reg_addr) {
    unsigned char reg_data;
    IIC_Start();
    IIC_Send(MPU6050_ADDR);
 8000840:	20d0      	movs	r0, #208	; 0xd0
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
 8000842:	6033      	str	r3, [r6, #0]
    delay(5);
}
unsigned char MPU_Sigle_Read(unsigned reg_addr) {
    unsigned char reg_data;
    IIC_Start();
    IIC_Send(MPU6050_ADDR);
 8000844:	f7ff fe54 	bl	80004f0 <IIC_Send>
    IIC_Wait_Ack();
 8000848:	f7ff fe14 	bl	8000474 <IIC_Wait_Ack>

    IIC_Send(reg_addr);
 800084c:	b2e0      	uxtb	r0, r4
 800084e:	f7ff fe4f 	bl	80004f0 <IIC_Send>
    IIC_Wait_Ack();
 8000852:	f7ff fe0f 	bl	8000474 <IIC_Wait_Ack>
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000856:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <MPU_GetData+0x1c8>)
    SDA = 1;
 8000858:	4c27      	ldr	r4, [pc, #156]	; (80008f8 <MPU_GetData+0x1cc>)
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 800085a:	685a      	ldr	r2, [r3, #4]
    SDA = 1;
 800085c:	2001      	movs	r0, #1
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 800085e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000862:	605a      	str	r2, [r3, #4]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000864:	f64e 2260 	movw	r2, #60000	; 0xea60
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000868:	6859      	ldr	r1, [r3, #4]
 800086a:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
 800086e:	6059      	str	r1, [r3, #4]
    SDA = 1;
 8000870:	6020      	str	r0, [r4, #0]
    SCL = 1;
 8000872:	6030      	str	r0, [r6, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000874:	3a01      	subs	r2, #1
 8000876:	d1fd      	bne.n	8000874 <MPU_GetData+0x148>
 8000878:	f64e 2360 	movw	r3, #60000	; 0xea60
void IIC_Start() {
    SDA_OUT();
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
 800087c:	491e      	ldr	r1, [pc, #120]	; (80008f8 <MPU_GetData+0x1cc>)
 800087e:	600a      	str	r2, [r1, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000880:	3b01      	subs	r3, #1
 8000882:	d1fd      	bne.n	8000880 <MPU_GetData+0x154>
        SCL = 0;
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
 8000884:	461c      	mov	r4, r3
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
 8000886:	4f1d      	ldr	r7, [pc, #116]	; (80008fc <MPU_GetData+0x1d0>)

    IIC_Send(reg_addr);
    IIC_Wait_Ack();

    IIC_Start();
    IIC_Send(MPU6050_ADDR+1);
 8000888:	20d1      	movs	r0, #209	; 0xd1
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
 800088a:	603b      	str	r3, [r7, #0]

    IIC_Send(reg_addr);
    IIC_Wait_Ack();

    IIC_Start();
    IIC_Send(MPU6050_ADDR+1);
 800088c:	f7ff fe30 	bl	80004f0 <IIC_Send>
    IIC_Wait_Ack();
 8000890:	f7ff fdf0 	bl	8000474 <IIC_Wait_Ack>
unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
        SCL = 0;
 8000894:	4638      	mov	r0, r7
 8000896:	4627      	mov	r7, r4
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MPU_GetData+0x1c8>)
    SDA = 1;
 800089a:	4917      	ldr	r1, [pc, #92]	; (80008f8 <MPU_GetData+0x1cc>)
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
 800089c:	685a      	ldr	r2, [r3, #4]
    SDA = 1;
 800089e:	2601      	movs	r6, #1
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
 80008a0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	685a      	ldr	r2, [r3, #4]
        SCL = 0;
        delay(5);
        SCL = 1;
        delay(5);
        dat<<=1;
        dat |= READ_SDA;
 80008a8:	f8df e054 	ldr.w	lr, [pc, #84]	; 8000900 <MPU_GetData+0x1d4>
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
 80008ac:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
 80008b0:	605a      	str	r2, [r3, #4]
    SDA = 1;
 80008b2:	600e      	str	r6, [r1, #0]
 80008b4:	2208      	movs	r2, #8
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80008b6:	f64e 2360 	movw	r3, #60000	; 0xea60
unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
        SCL = 0;
 80008ba:	6007      	str	r7, [r0, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80008bc:	3b01      	subs	r3, #1
 80008be:	d1fd      	bne.n	80008bc <MPU_GetData+0x190>
 80008c0:	f64e 2360 	movw	r3, #60000	; 0xea60
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
        SCL = 0;
        delay(5);
        SCL = 1;
 80008c4:	6006      	str	r6, [r0, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80008c6:	3b01      	subs	r3, #1
 80008c8:	d1fd      	bne.n	80008c6 <MPU_GetData+0x19a>
    for(i = 0; i < 8; i++) {
        SCL = 0;
        delay(5);
        SCL = 1;
        delay(5);
        dat<<=1;
 80008ca:	0064      	lsls	r4, r4, #1
        dat |= READ_SDA;
 80008cc:	f8de 1000 	ldr.w	r1, [lr]
    for(i = 0; i < 8; i++) {
        SCL = 0;
        delay(5);
        SCL = 1;
        delay(5);
        dat<<=1;
 80008d0:	b2e4      	uxtb	r4, r4
 80008d2:	1e53      	subs	r3, r2, #1
        dat |= READ_SDA;
 80008d4:	430c      	orrs	r4, r1

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
 80008d6:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
        SCL = 0;
        delay(5);
        SCL = 1;
        delay(5);
        dat<<=1;
        dat |= READ_SDA;
 80008da:	b2e4      	uxtb	r4, r4

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
 80008dc:	d1eb      	bne.n	80008b6 <MPU_GetData+0x18a>
        SCL = 1;
        delay(5);
        dat<<=1;
        dat |= READ_SDA;
    }
    SCL = 0;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <MPU_GetData+0x1d0>)
    IIC_Start();
    IIC_Send(MPU6050_ADDR+1);
    IIC_Wait_Ack();

    reg_data = IIC_Read();
    IIC_Ack(1);
 80008e0:	2001      	movs	r0, #1
        SCL = 1;
        delay(5);
        dat<<=1;
        dat |= READ_SDA;
    }
    SCL = 0;
 80008e2:	601a      	str	r2, [r3, #0]
    IIC_Start();
    IIC_Send(MPU6050_ADDR+1);
    IIC_Wait_Ack();

    reg_data = IIC_Read();
    IIC_Ack(1);
 80008e4:	f7ff fd98 	bl	8000418 <IIC_Ack>
    IIC_Stop();
 80008e8:	f7ff fd68 	bl	80003bc <IIC_Stop>
}
short MPU_GetData(unsigned char REG_Addr) {
    unsigned char H, L;
    H = MPU_Sigle_Read(REG_Addr);
    L = MPU_Sigle_Read(REG_Addr+1);
    return (short)(H<<8)+L;
 80008ec:	eb04 2005 	add.w	r0, r4, r5, lsl #8
}
 80008f0:	b200      	sxth	r0, r0
 80008f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008f4:	40010c00 	.word	0x40010c00
 80008f8:	422181b4 	.word	0x422181b4
 80008fc:	422181bc 	.word	0x422181bc
 8000900:	42218134 	.word	0x42218134

08000904 <MPU_init>:
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
}

void IIC_init() {
    RCC->APB2ENR |= 1<<3;
 8000904:	4836      	ldr	r0, [pc, #216]	; (80009e0 <MPU_init+0xdc>)
    unsigned char H, L;
    H = MPU_Sigle_Read(REG_Addr);
    L = MPU_Sigle_Read(REG_Addr+1);
    return (short)(H<<8)+L;
}
void MPU_init() {
 8000906:	b538      	push	{r3, r4, r5, lr}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
}

void IIC_init() {
    RCC->APB2ENR |= 1<<3;
 8000908:	6983      	ldr	r3, [r0, #24]
    GPIOB->CRH &= 0x0F0FFFFF;
 800090a:	4a36      	ldr	r2, [pc, #216]	; (80009e4 <MPU_init+0xe0>)
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
}

void IIC_init() {
    RCC->APB2ENR |= 1<<3;
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	6183      	str	r3, [r0, #24]
    GPIOB->CRH &= 0x0F0FFFFF;
 8000912:	6853      	ldr	r3, [r2, #4]
    GPIOB->ODR |= 5<<5;

    RCC->APB2ENR |= 1<<4;
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
 8000914:	4c34      	ldr	r4, [pc, #208]	; (80009e8 <MPU_init+0xe4>)
    for(count *= 12000; count!=0; count--);
}

void IIC_init() {
    RCC->APB2ENR |= 1<<3;
    GPIOB->CRH &= 0x0F0FFFFF;
 8000916:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800091a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800091e:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= 0x70700000;
 8000920:	6851      	ldr	r1, [r2, #4]
    GPIOB->ODR |= 5<<5;

    RCC->APB2ENR |= 1<<4;
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
 8000922:	2500      	movs	r5, #0
}

void IIC_init() {
    RCC->APB2ENR |= 1<<3;
    GPIOB->CRH &= 0x0F0FFFFF;
    GPIOB->CRH |= 0x70700000;
 8000924:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
 8000928:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
 800092c:	6051      	str	r1, [r2, #4]
    GPIOB->ODR |= 5<<5;
 800092e:	68d1      	ldr	r1, [r2, #12]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000930:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <MPU_init+0xe8>)

void IIC_init() {
    RCC->APB2ENR |= 1<<3;
    GPIOB->CRH &= 0x0F0FFFFF;
    GPIOB->CRH |= 0x70700000;
    GPIOB->ODR |= 5<<5;
 8000932:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
 8000936:	60d1      	str	r1, [r2, #12]

    RCC->APB2ENR |= 1<<4;
 8000938:	6981      	ldr	r1, [r0, #24]
 800093a:	f041 0110 	orr.w	r1, r1, #16
 800093e:	6181      	str	r1, [r0, #24]
    GPIOB->CRL &= 0xF0FFFFFF;
 8000940:	6811      	ldr	r1, [r2, #0]
 8000942:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000946:	6011      	str	r1, [r2, #0]
    GPIOB->CRL |= 0x03000000;
 8000948:	6811      	ldr	r1, [r2, #0]
 800094a:	f041 7140 	orr.w	r1, r1, #50331648	; 0x3000000
 800094e:	6011      	str	r1, [r2, #0]
    AD0 = 0;
 8000950:	6025      	str	r5, [r4, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000952:	3b01      	subs	r3, #1
 8000954:	d1fd      	bne.n	8000952 <MPU_init+0x4e>
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <MPU_init+0xe0>)
    SDA = 1;
 8000958:	4c25      	ldr	r4, [pc, #148]	; (80009f0 <MPU_init+0xec>)
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 800095a:	685a      	ldr	r2, [r3, #4]
    SDA = 1;
    SCL = 1;
 800095c:	4825      	ldr	r0, [pc, #148]	; (80009f4 <MPU_init+0xf0>)
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 800095e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	685a      	ldr	r2, [r3, #4]
    SDA = 1;
 8000966:	2101      	movs	r1, #1
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000968:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
 800096c:	605a      	str	r2, [r3, #4]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 800096e:	f64e 2260 	movw	r2, #60000	; 0xea60
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
    SDA = 1;
 8000972:	6021      	str	r1, [r4, #0]
    SCL = 1;
 8000974:	6001      	str	r1, [r0, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000976:	3a01      	subs	r2, #1
 8000978:	d1fd      	bne.n	8000976 <MPU_init+0x72>
 800097a:	f64e 2360 	movw	r3, #60000	; 0xea60
void IIC_Start() {
    SDA_OUT();
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
 800097e:	491c      	ldr	r1, [pc, #112]	; (80009f0 <MPU_init+0xec>)
 8000980:	600a      	str	r2, [r1, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000982:	3b01      	subs	r3, #1
 8000984:	d1fd      	bne.n	8000982 <MPU_init+0x7e>
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
 8000986:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <MPU_init+0xf0>)
}

void sendData_uart(unsigned char data);
void MPU_Sigle_Write(unsigned char reg_addr, unsigned char reg_data) {
    IIC_Start();
    IIC_Send(MPU6050_ADDR);
 8000988:	20d0      	movs	r0, #208	; 0xd0
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
 800098a:	6013      	str	r3, [r2, #0]
}

void sendData_uart(unsigned char data);
void MPU_Sigle_Write(unsigned char reg_addr, unsigned char reg_data) {
    IIC_Start();
    IIC_Send(MPU6050_ADDR);
 800098c:	f7ff fdb0 	bl	80004f0 <IIC_Send>
    if(!IIC_Wait_Ack()) LED1 = 1;
 8000990:	f7ff fd70 	bl	8000474 <IIC_Wait_Ack>
 8000994:	b910      	cbnz	r0, 800099c <MPU_init+0x98>
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MPU_init+0xf4>)
 8000998:	2201      	movs	r2, #1
 800099a:	601a      	str	r2, [r3, #0]

    IIC_Send(reg_addr);
 800099c:	206b      	movs	r0, #107	; 0x6b
 800099e:	f7ff fda7 	bl	80004f0 <IIC_Send>
    IIC_Wait_Ack();
 80009a2:	f7ff fd67 	bl	8000474 <IIC_Wait_Ack>

    IIC_Send(reg_data);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff fda2 	bl	80004f0 <IIC_Send>
    IIC_Wait_Ack();
 80009ac:	f7ff fd62 	bl	8000474 <IIC_Wait_Ack>

    IIC_Stop();
 80009b0:	f7ff fd04 	bl	80003bc <IIC_Stop>
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 80009b4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80009b8:	3b01      	subs	r3, #1
 80009ba:	d1fd      	bne.n	80009b8 <MPU_init+0xb4>
}
void MPU_init() {
    IIC_init();
    delay(500);
    MPU_Sigle_Write(PWR_MGMT_1, 0x00);
    MPU_Sigle_Write(SMPLRT_DIV, 0x07);
 80009bc:	2019      	movs	r0, #25
 80009be:	2107      	movs	r1, #7
 80009c0:	f7ff fdfa 	bl	80005b8 <MPU_Sigle_Write>
    MPU_Sigle_Write(CONFIG, 0x06);
 80009c4:	201a      	movs	r0, #26
 80009c6:	2106      	movs	r1, #6
 80009c8:	f7ff fdf6 	bl	80005b8 <MPU_Sigle_Write>
    MPU_Sigle_Write(GYRO_CONFIG, 0x18);
 80009cc:	201b      	movs	r0, #27
 80009ce:	2118      	movs	r1, #24
 80009d0:	f7ff fdf2 	bl	80005b8 <MPU_Sigle_Write>
    MPU_Sigle_Write(ACCEL_CONFIG, 0x01);
 80009d4:	201c      	movs	r0, #28
 80009d6:	2101      	movs	r1, #1
 80009d8:	f7ff fdee 	bl	80005b8 <MPU_Sigle_Write>
 80009dc:	bd38      	pop	{r3, r4, r5, pc}
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010c00 	.word	0x40010c00
 80009e8:	42220198 	.word	0x42220198
 80009ec:	005b8d80 	.word	0x005b8d80
 80009f0:	422181b4 	.word	0x422181b4
 80009f4:	422181bc 	.word	0x422181bc
 80009f8:	42228188 	.word	0x42228188

080009fc <initUART>:
}

void initUART(unsigned int pclk2, unsigned int bound) {
 80009fc:	b538      	push	{r3, r4, r5, lr}
    float temp;
    unsigned short mantissa;
    unsigned short fraction;
    temp = (float)(pclk2*1000000)/(bound*16);
 80009fe:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <initUART+0xa4>)
    MPU_Sigle_Write(CONFIG, 0x06);
    MPU_Sigle_Write(GYRO_CONFIG, 0x18);
    MPU_Sigle_Write(ACCEL_CONFIG, 0x01);
}

void initUART(unsigned int pclk2, unsigned int bound) {
 8000a00:	460d      	mov	r5, r1
    float temp;
    unsigned short mantissa;
    unsigned short fraction;
    temp = (float)(pclk2*1000000)/(bound*16);
 8000a02:	fb03 f000 	mul.w	r0, r3, r0
 8000a06:	f000 ff8d 	bl	8001924 <__aeabi_ui2f>
 8000a0a:	4604      	mov	r4, r0
 8000a0c:	0128      	lsls	r0, r5, #4
 8000a0e:	f000 ff89 	bl	8001924 <__aeabi_ui2f>
 8000a12:	4601      	mov	r1, r0
 8000a14:	4620      	mov	r0, r4
 8000a16:	f001 f891 	bl	8001b3c <__aeabi_fdiv>
 8000a1a:	4605      	mov	r5, r0
    mantissa = temp;
 8000a1c:	f001 f92a 	bl	8001c74 <__aeabi_f2uiz>
 8000a20:	b284      	uxth	r4, r0
    fraction = (temp - mantissa) * 16;
 8000a22:	4620      	mov	r0, r4
 8000a24:	f000 ff82 	bl	800192c <__aeabi_i2f>
 8000a28:	4601      	mov	r1, r0
 8000a2a:	4628      	mov	r0, r5
 8000a2c:	f000 fec8 	bl	80017c0 <__aeabi_fsub>
 8000a30:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8000a34:	f000 ffce 	bl	80019d4 <__aeabi_fmul>
 8000a38:	f001 f91c 	bl	8001c74 <__aeabi_f2uiz>
    mantissa <<= 4;
    mantissa += fraction;
    RCC->APB2ENR |= 1<<2;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <initUART+0xa8>)
    unsigned short fraction;
    temp = (float)(pclk2*1000000)/(bound*16);
    mantissa = temp;
    fraction = (temp - mantissa) * 16;
    mantissa <<= 4;
    mantissa += fraction;
 8000a3e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    RCC->APB2ENR |= 1<<2;
 8000a42:	699a      	ldr	r2, [r3, #24]
    RCC->APB2ENR |= 1<<14;

    GPIOA->CRH &= 0xFFFFF00F;
 8000a44:	4918      	ldr	r1, [pc, #96]	; (8000aa8 <initUART+0xac>)
    temp = (float)(pclk2*1000000)/(bound*16);
    mantissa = temp;
    fraction = (temp - mantissa) * 16;
    mantissa <<= 4;
    mantissa += fraction;
    RCC->APB2ENR |= 1<<2;
 8000a46:	f042 0204 	orr.w	r2, r2, #4
 8000a4a:	619a      	str	r2, [r3, #24]
    RCC->APB2ENR |= 1<<14;
 8000a4c:	699c      	ldr	r4, [r3, #24]
    GPIOA->CRH |= 0x000008B0;

    RCC->APB2RSTR |= 1<<14;
    RCC->APB2RSTR &= ~(1<<14);

    USART1->BRR = mantissa;
 8000a4e:	4a17      	ldr	r2, [pc, #92]	; (8000aac <initUART+0xb0>)
    mantissa = temp;
    fraction = (temp - mantissa) * 16;
    mantissa <<= 4;
    mantissa += fraction;
    RCC->APB2ENR |= 1<<2;
    RCC->APB2ENR |= 1<<14;
 8000a50:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000a54:	619c      	str	r4, [r3, #24]

    GPIOA->CRH &= 0xFFFFF00F;
 8000a56:	684c      	ldr	r4, [r1, #4]
    unsigned short fraction;
    temp = (float)(pclk2*1000000)/(bound*16);
    mantissa = temp;
    fraction = (temp - mantissa) * 16;
    mantissa <<= 4;
    mantissa += fraction;
 8000a58:	b280      	uxth	r0, r0
    RCC->APB2ENR |= 1<<2;
    RCC->APB2ENR |= 1<<14;

    GPIOA->CRH &= 0xFFFFF00F;
 8000a5a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8000a5e:	604c      	str	r4, [r1, #4]
    GPIOA->CRH |= 0x000008B0;
 8000a60:	684c      	ldr	r4, [r1, #4]
 8000a62:	f444 640b 	orr.w	r4, r4, #2224	; 0x8b0
 8000a66:	604c      	str	r4, [r1, #4]

    RCC->APB2RSTR |= 1<<14;
 8000a68:	68d9      	ldr	r1, [r3, #12]
 8000a6a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000a6e:	60d9      	str	r1, [r3, #12]
    RCC->APB2RSTR &= ~(1<<14);
 8000a70:	68d9      	ldr	r1, [r3, #12]
 8000a72:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8000a76:	60d9      	str	r1, [r3, #12]

    USART1->BRR = mantissa;
 8000a78:	8110      	strh	r0, [r2, #8]
    USART1->CR1 |= 0x200C;
 8000a7a:	8993      	ldrh	r3, [r2, #12]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a82:	f043 030c 	orr.w	r3, r3, #12
 8000a86:	8193      	strh	r3, [r2, #12]

    USART1->CR1 |= 1<<8;
 8000a88:	8993      	ldrh	r3, [r2, #12]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a90:	8193      	strh	r3, [r2, #12]
    USART1->CR1 |= 1<<5;
 8000a92:	8993      	ldrh	r3, [r2, #12]
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	f043 0320 	orr.w	r3, r3, #32
 8000a9a:	8193      	strh	r3, [r2, #12]
 8000a9c:	bd38      	pop	{r3, r4, r5, pc}
 8000a9e:	bf00      	nop
 8000aa0:	000f4240 	.word	0x000f4240
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40010800 	.word	0x40010800
 8000aac:	40013800 	.word	0x40013800

08000ab0 <sendData_uart>:
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <sendData_uart+0x10>)
    while((USART1->SR & 0x40) == 0);
 8000ab2:	461a      	mov	r2, r3

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000ab4:	8098      	strh	r0, [r3, #4]
    while((USART1->SR & 0x40) == 0);
 8000ab6:	8813      	ldrh	r3, [r2, #0]
 8000ab8:	065b      	lsls	r3, r3, #25
 8000aba:	d5fc      	bpl.n	8000ab6 <sendData_uart+0x6>
}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40013800 	.word	0x40013800

08000ac4 <showData>:

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000ac4:	4b3e      	ldr	r3, [pc, #248]	; (8000bc0 <showData+0xfc>)
    while((USART1->SR & 0x40) == 0);
}
void showData(short k) {
    unsigned char a, b, c, d, e;

    sendData_uart(k<0?'-':'+');
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bfb4      	ite	lt
 8000aca:	212d      	movlt	r1, #45	; 0x2d
 8000acc:	212b      	movge	r1, #43	; 0x2b
    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
    while((USART1->SR & 0x40) == 0);
 8000ace:	461a      	mov	r2, r3

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000ad0:	8099      	strh	r1, [r3, #4]
    while((USART1->SR & 0x40) == 0);
 8000ad2:	8813      	ldrh	r3, [r2, #0]
 8000ad4:	0659      	lsls	r1, r3, #25
 8000ad6:	d5fc      	bpl.n	8000ad2 <showData+0xe>
}
void showData(short k) {
 8000ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000adc:	4f38      	ldr	r7, [pc, #224]	; (8000bc0 <showData+0xfc>)
}
void showData(short k) {
    unsigned char a, b, c, d, e;

    sendData_uart(k<0?'-':'+');
    if(k<0) k=-k;
 8000ade:	2800      	cmp	r0, #0
    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
    while((USART1->SR & 0x40) == 0);
 8000ae0:	4639      	mov	r1, r7
}
void showData(short k) {
    unsigned char a, b, c, d, e;

    sendData_uart(k<0?'-':'+');
    if(k<0) k=-k;
 8000ae2:	bfb8      	it	lt
 8000ae4:	4240      	neglt	r0, r0
    e = (unsigned char)(k % 10);
    d = (unsigned char)(k/10) % 10;
    c = (unsigned char)(k/100) % 10;
 8000ae6:	4a37      	ldr	r2, [pc, #220]	; (8000bc4 <showData+0x100>)
void showData(short k) {
    unsigned char a, b, c, d, e;

    sendData_uart(k<0?'-':'+');
    if(k<0) k=-k;
    e = (unsigned char)(k % 10);
 8000ae8:	4c37      	ldr	r4, [pc, #220]	; (8000bc8 <showData+0x104>)
    d = (unsigned char)(k/10) % 10;
    c = (unsigned char)(k/100) % 10;
    b = (unsigned char)(k/1000) % 10;
 8000aea:	4b38      	ldr	r3, [pc, #224]	; (8000bcc <showData+0x108>)
}
void showData(short k) {
    unsigned char a, b, c, d, e;

    sendData_uart(k<0?'-':'+');
    if(k<0) k=-k;
 8000aec:	bfb8      	it	lt
 8000aee:	b200      	sxthlt	r0, r0
    e = (unsigned char)(k % 10);
    d = (unsigned char)(k/10) % 10;
    c = (unsigned char)(k/100) % 10;
 8000af0:	fb82 2c00 	smull	r2, ip, r2, r0
void showData(short k) {
    unsigned char a, b, c, d, e;

    sendData_uart(k<0?'-':'+');
    if(k<0) k=-k;
    e = (unsigned char)(k % 10);
 8000af4:	fb84 4e00 	smull	r4, lr, r4, r0
    d = (unsigned char)(k/10) % 10;
    c = (unsigned char)(k/100) % 10;
    b = (unsigned char)(k/1000) % 10;
 8000af8:	fb83 2300 	smull	r2, r3, r3, r0
void showData(short k) {
    unsigned char a, b, c, d, e;

    sendData_uart(k<0?'-':'+');
    if(k<0) k=-k;
    e = (unsigned char)(k % 10);
 8000afc:	ea4f 79e0 	mov.w	r9, r0, asr #31
    d = (unsigned char)(k/10) % 10;
 8000b00:	4c33      	ldr	r4, [pc, #204]	; (8000bd0 <showData+0x10c>)
void showData(short k) {
    unsigned char a, b, c, d, e;

    sendData_uart(k<0?'-':'+');
    if(k<0) k=-k;
    e = (unsigned char)(k % 10);
 8000b02:	ebc9 0eae 	rsb	lr, r9, lr, asr #2
    d = (unsigned char)(k/10) % 10;
    c = (unsigned char)(k/100) % 10;
 8000b06:	ebc9 1c6c 	rsb	ip, r9, ip, asr #5
    b = (unsigned char)(k/1000) % 10;
 8000b0a:	ebc9 13a3 	rsb	r3, r9, r3, asr #6
    a = (unsigned char)(k/10000);
 8000b0e:	4a31      	ldr	r2, [pc, #196]	; (8000bd4 <showData+0x110>)
    unsigned char a, b, c, d, e;

    sendData_uart(k<0?'-':'+');
    if(k<0) k=-k;
    e = (unsigned char)(k % 10);
    d = (unsigned char)(k/10) % 10;
 8000b10:	fa5f f88e 	uxtb.w	r8, lr
    c = (unsigned char)(k/100) % 10;
 8000b14:	fa5f fc8c 	uxtb.w	ip, ip
    b = (unsigned char)(k/1000) % 10;
 8000b18:	b2db      	uxtb	r3, r3
    unsigned char a, b, c, d, e;

    sendData_uart(k<0?'-':'+');
    if(k<0) k=-k;
    e = (unsigned char)(k % 10);
    d = (unsigned char)(k/10) % 10;
 8000b1a:	fba4 6508 	umull	r6, r5, r4, r8
    c = (unsigned char)(k/100) % 10;
    b = (unsigned char)(k/1000) % 10;
    a = (unsigned char)(k/10000);
 8000b1e:	fb82 a200 	smull	sl, r2, r2, r0

    sendData_uart(k<0?'-':'+');
    if(k<0) k=-k;
    e = (unsigned char)(k % 10);
    d = (unsigned char)(k/10) % 10;
    c = (unsigned char)(k/100) % 10;
 8000b22:	fba4 a60c 	umull	sl, r6, r4, ip
    b = (unsigned char)(k/1000) % 10;
 8000b26:	fba4 a403 	umull	sl, r4, r4, r3
    unsigned char a, b, c, d, e;

    sendData_uart(k<0?'-':'+');
    if(k<0) k=-k;
    e = (unsigned char)(k % 10);
    d = (unsigned char)(k/10) % 10;
 8000b2a:	08ed      	lsrs	r5, r5, #3
    c = (unsigned char)(k/100) % 10;
 8000b2c:	08f6      	lsrs	r6, r6, #3
    b = (unsigned char)(k/1000) % 10;
 8000b2e:	08e4      	lsrs	r4, r4, #3
    a = (unsigned char)(k/10000);
 8000b30:	ebc9 3222 	rsb	r2, r9, r2, asr #12
    sendData_uart(k<0?'-':'+');
    if(k<0) k=-k;
    e = (unsigned char)(k % 10);
    d = (unsigned char)(k/10) % 10;
    c = (unsigned char)(k/100) % 10;
    b = (unsigned char)(k/1000) % 10;
 8000b34:	eb04 0484 	add.w	r4, r4, r4, lsl #2
void showData(short k) {
    unsigned char a, b, c, d, e;

    sendData_uart(k<0?'-':'+');
    if(k<0) k=-k;
    e = (unsigned char)(k % 10);
 8000b38:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
    d = (unsigned char)(k/10) % 10;
 8000b3c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    c = (unsigned char)(k/100) % 10;
 8000b40:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    b = (unsigned char)(k/1000) % 10;
    a = (unsigned char)(k/10000);

    sendData_uart(a+0x30);
 8000b44:	3230      	adds	r2, #48	; 0x30
void showData(short k) {
    unsigned char a, b, c, d, e;

    sendData_uart(k<0?'-':'+');
    if(k<0) k=-k;
    e = (unsigned char)(k % 10);
 8000b46:	eba0 004e 	sub.w	r0, r0, lr, lsl #1
    d = (unsigned char)(k/10) % 10;
 8000b4a:	eba8 0545 	sub.w	r5, r8, r5, lsl #1
    c = (unsigned char)(k/100) % 10;
 8000b4e:	ebac 0646 	sub.w	r6, ip, r6, lsl #1
    b = (unsigned char)(k/1000) % 10;
 8000b52:	eba3 0344 	sub.w	r3, r3, r4, lsl #1

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000b56:	b2d2      	uxtb	r2, r2
void showData(short k) {
    unsigned char a, b, c, d, e;

    sendData_uart(k<0?'-':'+');
    if(k<0) k=-k;
    e = (unsigned char)(k % 10);
 8000b58:	b2c0      	uxtb	r0, r0
    d = (unsigned char)(k/10) % 10;
 8000b5a:	b2ed      	uxtb	r5, r5
    c = (unsigned char)(k/100) % 10;
 8000b5c:	b2f6      	uxtb	r6, r6
    b = (unsigned char)(k/1000) % 10;
 8000b5e:	b2dc      	uxtb	r4, r3

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000b60:	80ba      	strh	r2, [r7, #4]
    while((USART1->SR & 0x40) == 0);
 8000b62:	880b      	ldrh	r3, [r1, #0]
 8000b64:	4a16      	ldr	r2, [pc, #88]	; (8000bc0 <showData+0xfc>)
 8000b66:	065b      	lsls	r3, r3, #25
 8000b68:	d5fb      	bpl.n	8000b62 <showData+0x9e>
 8000b6a:	4611      	mov	r1, r2
    c = (unsigned char)(k/100) % 10;
    b = (unsigned char)(k/1000) % 10;
    a = (unsigned char)(k/10000);

    sendData_uart(a+0x30);
    sendData_uart(b+0x30);
 8000b6c:	f104 0330 	add.w	r3, r4, #48	; 0x30

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	8093      	strh	r3, [r2, #4]
    while((USART1->SR & 0x40) == 0);
 8000b74:	880b      	ldrh	r3, [r1, #0]
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <showData+0xfc>)
 8000b78:	065f      	lsls	r7, r3, #25
 8000b7a:	d5fb      	bpl.n	8000b74 <showData+0xb0>
 8000b7c:	4611      	mov	r1, r2
    b = (unsigned char)(k/1000) % 10;
    a = (unsigned char)(k/10000);

    sendData_uart(a+0x30);
    sendData_uart(b+0x30);
    sendData_uart(c+0x30);
 8000b7e:	f106 0330 	add.w	r3, r6, #48	; 0x30

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	8093      	strh	r3, [r2, #4]
    while((USART1->SR & 0x40) == 0);
 8000b86:	880b      	ldrh	r3, [r1, #0]
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <showData+0xfc>)
 8000b8a:	065e      	lsls	r6, r3, #25
 8000b8c:	d5fb      	bpl.n	8000b86 <showData+0xc2>
 8000b8e:	4611      	mov	r1, r2
    a = (unsigned char)(k/10000);

    sendData_uart(a+0x30);
    sendData_uart(b+0x30);
    sendData_uart(c+0x30);
    sendData_uart(d+0x30);
 8000b90:	3530      	adds	r5, #48	; 0x30

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000b92:	b2ed      	uxtb	r5, r5
 8000b94:	8095      	strh	r5, [r2, #4]
    while((USART1->SR & 0x40) == 0);
 8000b96:	880b      	ldrh	r3, [r1, #0]
 8000b98:	4a09      	ldr	r2, [pc, #36]	; (8000bc0 <showData+0xfc>)
 8000b9a:	065c      	lsls	r4, r3, #25
 8000b9c:	d5fb      	bpl.n	8000b96 <showData+0xd2>
 8000b9e:	4611      	mov	r1, r2

    sendData_uart(a+0x30);
    sendData_uart(b+0x30);
    sendData_uart(c+0x30);
    sendData_uart(d+0x30);
    sendData_uart(e+0x30);
 8000ba0:	3030      	adds	r0, #48	; 0x30

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000ba2:	b2c0      	uxtb	r0, r0
 8000ba4:	8090      	strh	r0, [r2, #4]
    while((USART1->SR & 0x40) == 0);
 8000ba6:	880b      	ldrh	r3, [r1, #0]
 8000ba8:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <showData+0xfc>)
 8000baa:	0658      	lsls	r0, r3, #25
 8000bac:	d5fb      	bpl.n	8000ba6 <showData+0xe2>
 8000bae:	4611      	mov	r1, r2

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000bb0:	232e      	movs	r3, #46	; 0x2e
 8000bb2:	8093      	strh	r3, [r2, #4]
    while((USART1->SR & 0x40) == 0);
 8000bb4:	880b      	ldrh	r3, [r1, #0]
 8000bb6:	065b      	lsls	r3, r3, #25
 8000bb8:	d5fc      	bpl.n	8000bb4 <showData+0xf0>
    sendData_uart(b+0x30);
    sendData_uart(c+0x30);
    sendData_uart(d+0x30);
    sendData_uart(e+0x30);
    sendData_uart('.');
}
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40013800 	.word	0x40013800
 8000bc4:	51eb851f 	.word	0x51eb851f
 8000bc8:	66666667 	.word	0x66666667
 8000bcc:	10624dd3 	.word	0x10624dd3
 8000bd0:	cccccccd 	.word	0xcccccccd
 8000bd4:	68db8bad 	.word	0x68db8bad

08000bd8 <main>:

int main() {
 8000bd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    initLED();
 8000bdc:	f7ff fb66 	bl	80002ac <initLED>
    initUART(72, 9600);
 8000be0:	2048      	movs	r0, #72	; 0x48
 8000be2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000be6:	f7ff ff09 	bl	80009fc <initUART>

    MPU_init();
 8000bea:	f7ff fe8b 	bl	8000904 <MPU_init>
 8000bee:	f8df 9278 	ldr.w	r9, [pc, #632]	; 8000e68 <main+0x290>
 8000bf2:	f8df 8278 	ldr.w	r8, [pc, #632]	; 8000e6c <main+0x294>
 8000bf6:	f8df b278 	ldr.w	fp, [pc, #632]	; 8000e70 <main+0x298>
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
    SDA = 1;
 8000bfa:	4d95      	ldr	r5, [pc, #596]	; (8000e50 <main+0x278>)
    SCL = 1;
 8000bfc:	f8df a274 	ldr.w	sl, [pc, #628]	; 8000e74 <main+0x29c>
    IIC_Stop();
    return reg_data;
}
short MPU_GetData(unsigned char REG_Addr) {
    unsigned char H, L;
    H = MPU_Sigle_Read(REG_Addr);
 8000c00:	203b      	movs	r0, #59	; 0x3b
 8000c02:	f7ff fd1b 	bl	800063c <MPU_Sigle_Read>
 8000c06:	4604      	mov	r4, r0
    L = MPU_Sigle_Read(REG_Addr+1);
 8000c08:	203c      	movs	r0, #60	; 0x3c
 8000c0a:	f7ff fd17 	bl	800063c <MPU_Sigle_Read>
    return (short)(H<<8)+L;
 8000c0e:	eb00 2004 	add.w	r0, r0, r4, lsl #8
    //USART1->DR = 'A';
    //while((USART1->SR & 0x40)==1);

    while(1) {
        GYRO_x = MPU_GetData(ACCEL_XOUT_H);
        GYRO_x /= 16.4;
 8000c12:	b200      	sxth	r0, r0
 8000c14:	f000 fb30 	bl	8001278 <__aeabi_i2d>
 8000c18:	a38b      	add	r3, pc, #556	; (adr r3, 8000e48 <main+0x270>)
 8000c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1e:	f000 fcbb 	bl	8001598 <__aeabi_ddiv>
 8000c22:	f000 fda1 	bl	8001768 <__aeabi_d2iz>

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000c26:	4b8b      	ldr	r3, [pc, #556]	; (8000e54 <main+0x27c>)
    //USART1->DR = 'A';
    //while((USART1->SR & 0x40)==1);

    while(1) {
        GYRO_x = MPU_GetData(ACCEL_XOUT_H);
        GYRO_x /= 16.4;
 8000c28:	b280      	uxth	r0, r0
    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
    while((USART1->SR & 0x40) == 0);
 8000c2a:	4619      	mov	r1, r3

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000c2c:	2258      	movs	r2, #88	; 0x58
    //USART1->DR = 'A';
    //while((USART1->SR & 0x40)==1);

    while(1) {
        GYRO_x = MPU_GetData(ACCEL_XOUT_H);
        GYRO_x /= 16.4;
 8000c2e:	f8a9 0000 	strh.w	r0, [r9]

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000c32:	809a      	strh	r2, [r3, #4]
    while((USART1->SR & 0x40) == 0);
 8000c34:	880b      	ldrh	r3, [r1, #0]
 8000c36:	4a87      	ldr	r2, [pc, #540]	; (8000e54 <main+0x27c>)
 8000c38:	065c      	lsls	r4, r3, #25
 8000c3a:	d5fb      	bpl.n	8000c34 <main+0x5c>
 8000c3c:	4611      	mov	r1, r2

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000c3e:	233a      	movs	r3, #58	; 0x3a
 8000c40:	8093      	strh	r3, [r2, #4]
    while((USART1->SR & 0x40) == 0);
 8000c42:	880b      	ldrh	r3, [r1, #0]
 8000c44:	4c83      	ldr	r4, [pc, #524]	; (8000e54 <main+0x27c>)
 8000c46:	065b      	lsls	r3, r3, #25
 8000c48:	d5fb      	bpl.n	8000c42 <main+0x6a>
    while(1) {
        GYRO_x = MPU_GetData(ACCEL_XOUT_H);
        GYRO_x /= 16.4;
        sendData_uart('X');
        sendData_uart(':');
        showData(GYRO_x);
 8000c4a:	b200      	sxth	r0, r0
 8000c4c:	f7ff ff3a 	bl	8000ac4 <showData>
    IIC_Stop();
    return reg_data;
}
short MPU_GetData(unsigned char REG_Addr) {
    unsigned char H, L;
    H = MPU_Sigle_Read(REG_Addr);
 8000c50:	203d      	movs	r0, #61	; 0x3d
 8000c52:	f7ff fcf3 	bl	800063c <MPU_Sigle_Read>
 8000c56:	4606      	mov	r6, r0
    L = MPU_Sigle_Read(REG_Addr+1);
 8000c58:	203e      	movs	r0, #62	; 0x3e
 8000c5a:	f7ff fcef 	bl	800063c <MPU_Sigle_Read>
    return (short)(H<<8)+L;
 8000c5e:	eb00 2006 	add.w	r0, r0, r6, lsl #8
        sendData_uart('X');
        sendData_uart(':');
        showData(GYRO_x);

        GYRO_y = MPU_GetData(ACCEL_YOUT_H);
        GYRO_y /= 16.4;
 8000c62:	b200      	sxth	r0, r0
 8000c64:	f000 fb08 	bl	8001278 <__aeabi_i2d>
 8000c68:	a377      	add	r3, pc, #476	; (adr r3, 8000e48 <main+0x270>)
 8000c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c6e:	f000 fc93 	bl	8001598 <__aeabi_ddiv>
 8000c72:	f000 fd79 	bl	8001768 <__aeabi_d2iz>
    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
    while((USART1->SR & 0x40) == 0);
 8000c76:	4621      	mov	r1, r4
        sendData_uart('X');
        sendData_uart(':');
        showData(GYRO_x);

        GYRO_y = MPU_GetData(ACCEL_YOUT_H);
        GYRO_y /= 16.4;
 8000c78:	b280      	uxth	r0, r0

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000c7a:	2359      	movs	r3, #89	; 0x59
        sendData_uart('X');
        sendData_uart(':');
        showData(GYRO_x);

        GYRO_y = MPU_GetData(ACCEL_YOUT_H);
        GYRO_y /= 16.4;
 8000c7c:	f8a8 0000 	strh.w	r0, [r8]

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000c80:	80a3      	strh	r3, [r4, #4]
    while((USART1->SR & 0x40) == 0);
 8000c82:	880b      	ldrh	r3, [r1, #0]
 8000c84:	4a73      	ldr	r2, [pc, #460]	; (8000e54 <main+0x27c>)
 8000c86:	065f      	lsls	r7, r3, #25
 8000c88:	d5fb      	bpl.n	8000c82 <main+0xaa>
 8000c8a:	4611      	mov	r1, r2

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000c8c:	233a      	movs	r3, #58	; 0x3a
 8000c8e:	8093      	strh	r3, [r2, #4]
    while((USART1->SR & 0x40) == 0);
 8000c90:	880b      	ldrh	r3, [r1, #0]
 8000c92:	4c70      	ldr	r4, [pc, #448]	; (8000e54 <main+0x27c>)
 8000c94:	065e      	lsls	r6, r3, #25
 8000c96:	d5fb      	bpl.n	8000c90 <main+0xb8>

        GYRO_y = MPU_GetData(ACCEL_YOUT_H);
        GYRO_y /= 16.4;
        sendData_uart('Y');
        sendData_uart(':');
        showData(GYRO_y);
 8000c98:	b200      	sxth	r0, r0
 8000c9a:	f7ff ff13 	bl	8000ac4 <showData>
    IIC_Stop();
    return reg_data;
}
short MPU_GetData(unsigned char REG_Addr) {
    unsigned char H, L;
    H = MPU_Sigle_Read(REG_Addr);
 8000c9e:	203f      	movs	r0, #63	; 0x3f
 8000ca0:	f7ff fccc 	bl	800063c <MPU_Sigle_Read>
 8000ca4:	4606      	mov	r6, r0
    L = MPU_Sigle_Read(REG_Addr+1);
 8000ca6:	2040      	movs	r0, #64	; 0x40
 8000ca8:	f7ff fcc8 	bl	800063c <MPU_Sigle_Read>
    return (short)(H<<8)+L;
 8000cac:	eb00 2006 	add.w	r0, r0, r6, lsl #8
        sendData_uart('Y');
        sendData_uart(':');
        showData(GYRO_y);

        GYRO_z = MPU_GetData(ACCEL_ZOUT_H);
        GYRO_z /= 16.4;
 8000cb0:	b200      	sxth	r0, r0
 8000cb2:	f000 fae1 	bl	8001278 <__aeabi_i2d>
 8000cb6:	a364      	add	r3, pc, #400	; (adr r3, 8000e48 <main+0x270>)
 8000cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cbc:	f000 fc6c 	bl	8001598 <__aeabi_ddiv>
 8000cc0:	f000 fd52 	bl	8001768 <__aeabi_d2iz>
    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
    while((USART1->SR & 0x40) == 0);
 8000cc4:	4621      	mov	r1, r4
        sendData_uart('Y');
        sendData_uart(':');
        showData(GYRO_y);

        GYRO_z = MPU_GetData(ACCEL_ZOUT_H);
        GYRO_z /= 16.4;
 8000cc6:	b280      	uxth	r0, r0

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000cc8:	235a      	movs	r3, #90	; 0x5a
        sendData_uart('Y');
        sendData_uart(':');
        showData(GYRO_y);

        GYRO_z = MPU_GetData(ACCEL_ZOUT_H);
        GYRO_z /= 16.4;
 8000cca:	f8ab 0000 	strh.w	r0, [fp]

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000cce:	80a3      	strh	r3, [r4, #4]
    while((USART1->SR & 0x40) == 0);
 8000cd0:	880b      	ldrh	r3, [r1, #0]
 8000cd2:	4a60      	ldr	r2, [pc, #384]	; (8000e54 <main+0x27c>)
 8000cd4:	065c      	lsls	r4, r3, #25
 8000cd6:	d5fb      	bpl.n	8000cd0 <main+0xf8>
 8000cd8:	4611      	mov	r1, r2

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000cda:	233a      	movs	r3, #58	; 0x3a
 8000cdc:	8093      	strh	r3, [r2, #4]
    while((USART1->SR & 0x40) == 0);
 8000cde:	880b      	ldrh	r3, [r1, #0]
 8000ce0:	4c5c      	ldr	r4, [pc, #368]	; (8000e54 <main+0x27c>)
 8000ce2:	065a      	lsls	r2, r3, #25
 8000ce4:	d5fb      	bpl.n	8000cde <main+0x106>

        GYRO_z = MPU_GetData(ACCEL_ZOUT_H);
        GYRO_z /= 16.4;
        sendData_uart('Z');
        sendData_uart(':');
        showData(GYRO_z);
 8000ce6:	b200      	sxth	r0, r0
 8000ce8:	f7ff feec 	bl	8000ac4 <showData>
    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
    while((USART1->SR & 0x40) == 0);
 8000cec:	4621      	mov	r1, r4

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000cee:	230d      	movs	r3, #13
 8000cf0:	80a3      	strh	r3, [r4, #4]
    while((USART1->SR & 0x40) == 0);
 8000cf2:	880b      	ldrh	r3, [r1, #0]
 8000cf4:	4a57      	ldr	r2, [pc, #348]	; (8000e54 <main+0x27c>)
 8000cf6:	065b      	lsls	r3, r3, #25
 8000cf8:	d5fb      	bpl.n	8000cf2 <main+0x11a>
 8000cfa:	4611      	mov	r1, r2

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000cfc:	230a      	movs	r3, #10
 8000cfe:	8093      	strh	r3, [r2, #4]
    while((USART1->SR & 0x40) == 0);
 8000d00:	880b      	ldrh	r3, [r1, #0]
 8000d02:	065f      	lsls	r7, r3, #25
 8000d04:	d5fc      	bpl.n	8000d00 <main+0x128>
    IIC_Stop();
    return reg_data;
}
short MPU_GetData(unsigned char REG_Addr) {
    unsigned char H, L;
    H = MPU_Sigle_Read(REG_Addr);
 8000d06:	2041      	movs	r0, #65	; 0x41
 8000d08:	f7ff fc98 	bl	800063c <MPU_Sigle_Read>
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000d0c:	f64e 2360 	movw	r3, #60000	; 0xea60
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000d10:	4a51      	ldr	r2, [pc, #324]	; (8000e58 <main+0x280>)
    IIC_Stop();
    return reg_data;
}
short MPU_GetData(unsigned char REG_Addr) {
    unsigned char H, L;
    H = MPU_Sigle_Read(REG_Addr);
 8000d12:	4606      	mov	r6, r0
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000d14:	6851      	ldr	r1, [r2, #4]
    SDA = 1;
 8000d16:	2001      	movs	r0, #1
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000d18:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8000d1c:	6051      	str	r1, [r2, #4]
 8000d1e:	6851      	ldr	r1, [r2, #4]
 8000d20:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
 8000d24:	6051      	str	r1, [r2, #4]
    SDA = 1;
 8000d26:	6028      	str	r0, [r5, #0]
    SCL = 1;
 8000d28:	f8ca 0000 	str.w	r0, [sl]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	d1fd      	bne.n	8000d2c <main+0x154>
void IIC_Start() {
    SDA_OUT();
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
 8000d30:	602b      	str	r3, [r5, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000d32:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000d36:	3b01      	subs	r3, #1
 8000d38:	d1fd      	bne.n	8000d36 <main+0x15e>
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
 8000d3a:	f8ca 3000 	str.w	r3, [sl]
    delay(5);
}
unsigned char MPU_Sigle_Read(unsigned reg_addr) {
    unsigned char reg_data;
    IIC_Start();
    IIC_Send(MPU6050_ADDR);
 8000d3e:	20d0      	movs	r0, #208	; 0xd0
 8000d40:	f7ff fbd6 	bl	80004f0 <IIC_Send>
    IIC_Wait_Ack();
 8000d44:	f7ff fb96 	bl	8000474 <IIC_Wait_Ack>

    IIC_Send(reg_addr);
 8000d48:	2042      	movs	r0, #66	; 0x42
 8000d4a:	f7ff fbd1 	bl	80004f0 <IIC_Send>
    IIC_Wait_Ack();
 8000d4e:	f7ff fb91 	bl	8000474 <IIC_Wait_Ack>
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000d52:	f64e 2360 	movw	r3, #60000	; 0xea60
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000d56:	4a40      	ldr	r2, [pc, #256]	; (8000e58 <main+0x280>)
    SDA = 1;
 8000d58:	2001      	movs	r0, #1
    GPIOB->CRL &= 0xF0FFFFFF;
    GPIOB->CRL |= 0x03000000;
    AD0 = 0;
}
void IIC_Start() {
    SDA_OUT();
 8000d5a:	6851      	ldr	r1, [r2, #4]
 8000d5c:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8000d60:	6051      	str	r1, [r2, #4]
 8000d62:	6851      	ldr	r1, [r2, #4]
 8000d64:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
 8000d68:	6051      	str	r1, [r2, #4]
    SDA = 1;
 8000d6a:	6028      	str	r0, [r5, #0]
    SCL = 1;
 8000d6c:	f8ca 0000 	str.w	r0, [sl]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000d70:	3b01      	subs	r3, #1
 8000d72:	d1fd      	bne.n	8000d70 <main+0x198>
void IIC_Start() {
    SDA_OUT();
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
 8000d74:	602b      	str	r3, [r5, #0]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000d76:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	d1fd      	bne.n	8000d7a <main+0x1a2>
        SCL = 0;
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
 8000d7e:	461c      	mov	r4, r3
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
        SCL = 0;
 8000d80:	4627      	mov	r7, r4
    SDA = 1;
    SCL = 1;
    delay(5);
    SDA = 0;
    delay(5);
    SCL = 0;
 8000d82:	f8ca 3000 	str.w	r3, [sl]

    IIC_Send(reg_addr);
    IIC_Wait_Ack();

    IIC_Start();
    IIC_Send(MPU6050_ADDR+1);
 8000d86:	20d1      	movs	r0, #209	; 0xd1
 8000d88:	f7ff fbb2 	bl	80004f0 <IIC_Send>
    IIC_Wait_Ack();
 8000d8c:	f7ff fb72 	bl	8000474 <IIC_Wait_Ack>
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
 8000d90:	4b31      	ldr	r3, [pc, #196]	; (8000e58 <main+0x280>)
    SDA = 1;
 8000d92:	2101      	movs	r1, #1
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
 8000d94:	685a      	ldr	r2, [r3, #4]
    SDA = 1;
    for(i = 0; i < 8; i++) {
        SCL = 0;
        delay(5);
        SCL = 1;
 8000d96:	4608      	mov	r0, r1
    }
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
 8000d98:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
 8000da4:	605a      	str	r2, [r3, #4]
    SDA = 1;
 8000da6:	6029      	str	r1, [r5, #0]
        SCL = 0;
        delay(5);
        SCL = 1;
        delay(5);
        dat<<=1;
        dat |= READ_SDA;
 8000da8:	492c      	ldr	r1, [pc, #176]	; (8000e5c <main+0x284>)
}

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
    SDA = 1;
 8000daa:	2208      	movs	r2, #8
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000dac:	f64e 2360 	movw	r3, #60000	; 0xea60
unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
        SCL = 0;
 8000db0:	f8ca 7000 	str.w	r7, [sl]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000db4:	3b01      	subs	r3, #1
 8000db6:	d1fd      	bne.n	8000db4 <main+0x1dc>
 8000db8:	f64e 2360 	movw	r3, #60000	; 0xea60
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
        SCL = 0;
        delay(5);
        SCL = 1;
 8000dbc:	f8ca 0000 	str.w	r0, [sl]
    RCC->APB2ENR |= 1<<5;
    GPIOD->CRL &= 0xFFFFF0FF;
    GPIOD->CRL |= 0x00000300;
}
void delay(volatile unsigned int count) {
    for(count *= 12000; count!=0; count--);
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	d1fd      	bne.n	8000dc0 <main+0x1e8>
    for(i = 0; i < 8; i++) {
        SCL = 0;
        delay(5);
        SCL = 1;
        delay(5);
        dat<<=1;
 8000dc4:	0064      	lsls	r4, r4, #1
        dat |= READ_SDA;
 8000dc6:	680b      	ldr	r3, [r1, #0]
    for(i = 0; i < 8; i++) {
        SCL = 0;
        delay(5);
        SCL = 1;
        delay(5);
        dat<<=1;
 8000dc8:	b2e4      	uxtb	r4, r4
 8000dca:	3a01      	subs	r2, #1
        dat |= READ_SDA;
 8000dcc:	431c      	orrs	r4, r3

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
 8000dce:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
        SCL = 0;
        delay(5);
        SCL = 1;
        delay(5);
        dat<<=1;
        dat |= READ_SDA;
 8000dd2:	b2e4      	uxtb	r4, r4

unsigned char IIC_Read() {
    unsigned char i, dat = 0;
    SDA_IN();
    SDA = 1;
    for(i = 0; i < 8; i++) {
 8000dd4:	d1ea      	bne.n	8000dac <main+0x1d4>
        SCL = 1;
        delay(5);
        dat<<=1;
        dat |= READ_SDA;
    }
    SCL = 0;
 8000dd6:	f8ca 2000 	str.w	r2, [sl]
    IIC_Start();
    IIC_Send(MPU6050_ADDR+1);
    IIC_Wait_Ack();

    reg_data = IIC_Read();
    IIC_Ack(1);
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f7ff fb1c 	bl	8000418 <IIC_Ack>
    IIC_Stop();
 8000de0:	f7ff faec 	bl	80003bc <IIC_Stop>
}
short MPU_GetData(unsigned char REG_Addr) {
    unsigned char H, L;
    H = MPU_Sigle_Read(REG_Addr);
    L = MPU_Sigle_Read(REG_Addr+1);
    return (short)(H<<8)+L;
 8000de4:	eb04 2006 	add.w	r0, r4, r6, lsl #8

        sendData_uart(0x0D);
        sendData_uart(0x0A);

        short tem = MPU_GetData(TEMP_OUT_H);
        tem = 35 + ((double) (tem + 13200)) / 200;
 8000de8:	b200      	sxth	r0, r0
 8000dea:	f500 504e 	add.w	r0, r0, #13184	; 0x3380
 8000dee:	3010      	adds	r0, #16
 8000df0:	f000 fa42 	bl	8001278 <__aeabi_i2d>
 8000df4:	2200      	movs	r2, #0
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <main+0x288>)
 8000df8:	f000 fbce 	bl	8001598 <__aeabi_ddiv>
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <main+0x28c>)
 8000e00:	f000 f8ee 	bl	8000fe0 <__adddf3>
 8000e04:	f000 fcb0 	bl	8001768 <__aeabi_d2iz>
        showData(tem);
 8000e08:	b200      	sxth	r0, r0
 8000e0a:	f7ff fe5b 	bl	8000ac4 <showData>

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <main+0x27c>)
 8000e10:	2254      	movs	r2, #84	; 0x54
    while((USART1->SR & 0x40) == 0);
 8000e12:	4619      	mov	r1, r3

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000e14:	809a      	strh	r2, [r3, #4]
    while((USART1->SR & 0x40) == 0);
 8000e16:	880b      	ldrh	r3, [r1, #0]
 8000e18:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <main+0x27c>)
 8000e1a:	065e      	lsls	r6, r3, #25
 8000e1c:	d5fb      	bpl.n	8000e16 <main+0x23e>
 8000e1e:	4611      	mov	r1, r2

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000e20:	233a      	movs	r3, #58	; 0x3a
 8000e22:	8093      	strh	r3, [r2, #4]
    while((USART1->SR & 0x40) == 0);
 8000e24:	880b      	ldrh	r3, [r1, #0]
 8000e26:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <main+0x27c>)
 8000e28:	065c      	lsls	r4, r3, #25
 8000e2a:	d5fb      	bpl.n	8000e24 <main+0x24c>
 8000e2c:	4611      	mov	r1, r2

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000e2e:	230d      	movs	r3, #13
 8000e30:	8093      	strh	r3, [r2, #4]
    while((USART1->SR & 0x40) == 0);
 8000e32:	880b      	ldrh	r3, [r1, #0]
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <main+0x27c>)
 8000e36:	0658      	lsls	r0, r3, #25
 8000e38:	d5fb      	bpl.n	8000e32 <main+0x25a>
 8000e3a:	4611      	mov	r1, r2

    USART1->CR1 |= 1<<8;
    USART1->CR1 |= 1<<5;
}
void sendData_uart(unsigned char data) {
    USART1->DR = data;
 8000e3c:	230a      	movs	r3, #10
 8000e3e:	8093      	strh	r3, [r2, #4]
    while((USART1->SR & 0x40) == 0);
 8000e40:	880b      	ldrh	r3, [r1, #0]
 8000e42:	065b      	lsls	r3, r3, #25
 8000e44:	d5fc      	bpl.n	8000e40 <main+0x268>
 8000e46:	e6db      	b.n	8000c00 <main+0x28>
 8000e48:	66666666 	.word	0x66666666
 8000e4c:	40306666 	.word	0x40306666
 8000e50:	422181b4 	.word	0x422181b4
 8000e54:	40013800 	.word	0x40013800
 8000e58:	40010c00 	.word	0x40010c00
 8000e5c:	42218134 	.word	0x42218134
 8000e60:	40690000 	.word	0x40690000
 8000e64:	40418000 	.word	0x40418000
 8000e68:	2000001a 	.word	0x2000001a
 8000e6c:	2000002a 	.word	0x2000002a
 8000e70:	20000018 	.word	0x20000018
 8000e74:	422181bc 	.word	0x422181bc

08000e78 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e78:	4b3c      	ldr	r3, [pc, #240]	; (8000f6c <SystemInit+0xf4>)
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e7a:	b430      	push	{r4, r5}
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e7c:	6818      	ldr	r0, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000e7e:	493c      	ldr	r1, [pc, #240]	; (8000f70 <SystemInit+0xf8>)
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e80:	f040 0001 	orr.w	r0, r0, #1
 8000e84:	6018      	str	r0, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000e86:	685d      	ldr	r5, [r3, #4]
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e88:	b082      	sub	sp, #8
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000e8a:	4029      	ands	r1, r5
 8000e8c:	6059      	str	r1, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000e8e:	6819      	ldr	r1, [r3, #0]
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000e90:	2000      	movs	r0, #0
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000e92:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000e96:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000e9a:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e9c:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000e9e:	f44f 041f 	mov.w	r4, #10420224	; 0x9f0000
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ea2:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000ea6:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000ea8:	6859      	ldr	r1, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000eaa:	461a      	mov	r2, r3

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000eac:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8000eb0:	6059      	str	r1, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000eb2:	609c      	str	r4, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000eb4:	9000      	str	r0, [sp, #0]
 8000eb6:	9001      	str	r0, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000eb8:	6819      	ldr	r1, [r3, #0]
 8000eba:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8000ebe:	6019      	str	r1, [r3, #0]
 8000ec0:	e003      	b.n	8000eca <SystemInit+0x52>
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000ec2:	9b00      	ldr	r3, [sp, #0]
 8000ec4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000ec8:	d009      	beq.n	8000ede <SystemInit+0x66>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000eca:	6813      	ldr	r3, [r2, #0]
 8000ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed0:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 8000ed2:	9b00      	ldr	r3, [sp, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000ed8:	9b01      	ldr	r3, [sp, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0f1      	beq.n	8000ec2 <SystemInit+0x4a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000ede:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <SystemInit+0xf4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000ee6:	bf18      	it	ne
 8000ee8:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000eea:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000eec:	9b01      	ldr	r3, [sp, #4]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d006      	beq.n	8000f00 <SystemInit+0x88>
  SetSysClock();

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ef2:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <SystemInit+0xfc>)
 8000ef4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ef8:	609a      	str	r2, [r3, #8]
#endif 
}
 8000efa:	b002      	add	sp, #8
 8000efc:	bc30      	pop	{r4, r5}
 8000efe:	4770      	bx	lr
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000f00:	4a1d      	ldr	r2, [pc, #116]	; (8000f78 <SystemInit+0x100>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000f02:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <SystemInit+0xf4>)
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000f04:	6810      	ldr	r0, [r2, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000f06:	4619      	mov	r1, r3
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000f08:	f040 0010 	orr.w	r0, r0, #16
 8000f0c:	6010      	str	r0, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000f0e:	6810      	ldr	r0, [r2, #0]
 8000f10:	f020 0003 	bic.w	r0, r0, #3
 8000f14:	6010      	str	r0, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000f16:	6810      	ldr	r0, [r2, #0]
 8000f18:	f040 0002 	orr.w	r0, r0, #2
 8000f1c:	6010      	str	r0, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000f1e:	685a      	ldr	r2, [r3, #4]
 8000f20:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f2c:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000f34:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8000f3c:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000f44:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000f46:	680b      	ldr	r3, [r1, #0]
 8000f48:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <SystemInit+0xf4>)
 8000f4a:	019b      	lsls	r3, r3, #6
 8000f4c:	d5fb      	bpl.n	8000f46 <SystemInit+0xce>
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000f4e:	4611      	mov	r1, r2
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000f50:	6853      	ldr	r3, [r2, #4]
 8000f52:	f023 0303 	bic.w	r3, r3, #3
 8000f56:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000f58:	6853      	ldr	r3, [r2, #4]
 8000f5a:	f043 0302 	orr.w	r3, r3, #2
 8000f5e:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000f60:	684b      	ldr	r3, [r1, #4]
 8000f62:	f003 030c 	and.w	r3, r3, #12
 8000f66:	2b08      	cmp	r3, #8
 8000f68:	d1fa      	bne.n	8000f60 <SystemInit+0xe8>
 8000f6a:	e7c2      	b.n	8000ef2 <SystemInit+0x7a>
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	f8ff0000 	.word	0xf8ff0000
 8000f74:	e000ed00 	.word	0xe000ed00
 8000f78:	40022000 	.word	0x40022000

08000f7c <SystemCoreClockUpdate>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000f7c:	4a11      	ldr	r2, [pc, #68]	; (8000fc4 <SystemCoreClockUpdate+0x48>)
 8000f7e:	6853      	ldr	r3, [r2, #4]
 8000f80:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d10e      	bne.n	8000fa6 <SystemCoreClockUpdate+0x2a>
      SystemCoreClock = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000f88:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000f8a:	6851      	ldr	r1, [r2, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000f8c:	f3c3 4383 	ubfx	r3, r3, #18, #4
      
      if (pllsource == 0x00)
 8000f90:	03c9      	lsls	r1, r1, #15
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000f92:	f103 0302 	add.w	r3, r3, #2
      
      if (pllsource == 0x00)
 8000f96:	d510      	bpl.n	8000fba <SystemCoreClockUpdate+0x3e>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000f98:	6852      	ldr	r2, [r2, #4]
 8000f9a:	0392      	lsls	r2, r2, #14
 8000f9c:	d40d      	bmi.n	8000fba <SystemCoreClockUpdate+0x3e>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <SystemCoreClockUpdate+0x4c>)
 8000fa0:	fb02 f303 	mul.w	r3, r2, r3
 8000fa4:	e000      	b.n	8000fa8 <SystemCoreClockUpdate+0x2c>
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
  
  switch (tmp)
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <SystemCoreClockUpdate+0x4c>)
      break;
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000fa8:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <SystemCoreClockUpdate+0x48>)
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <SystemCoreClockUpdate+0x50>)
 8000fac:	6852      	ldr	r2, [r2, #4]
 8000fae:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000fb2:	5c8a      	ldrb	r2, [r1, r2]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000fb4:	40d3      	lsrs	r3, r2
 8000fb6:	610b      	str	r3, [r1, #16]
 8000fb8:	4770      	bx	lr
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <SystemCoreClockUpdate+0x54>)
 8000fbc:	fb02 f303 	mul.w	r3, r2, r3
 8000fc0:	e7f2      	b.n	8000fa8 <SystemCoreClockUpdate+0x2c>
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	007a1200 	.word	0x007a1200
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	003d0900 	.word	0x003d0900

08000fd4 <__aeabi_drsub>:
 8000fd4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000fd8:	e002      	b.n	8000fe0 <__adddf3>
 8000fda:	bf00      	nop

08000fdc <__aeabi_dsub>:
 8000fdc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000fe0 <__adddf3>:
 8000fe0:	b530      	push	{r4, r5, lr}
 8000fe2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000fe6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000fea:	ea94 0f05 	teq	r4, r5
 8000fee:	bf08      	it	eq
 8000ff0:	ea90 0f02 	teqeq	r0, r2
 8000ff4:	bf1f      	itttt	ne
 8000ff6:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000ffa:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000ffe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8001002:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001006:	f000 80e2 	beq.w	80011ce <__adddf3+0x1ee>
 800100a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800100e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8001012:	bfb8      	it	lt
 8001014:	426d      	neglt	r5, r5
 8001016:	dd0c      	ble.n	8001032 <__adddf3+0x52>
 8001018:	442c      	add	r4, r5
 800101a:	ea80 0202 	eor.w	r2, r0, r2
 800101e:	ea81 0303 	eor.w	r3, r1, r3
 8001022:	ea82 0000 	eor.w	r0, r2, r0
 8001026:	ea83 0101 	eor.w	r1, r3, r1
 800102a:	ea80 0202 	eor.w	r2, r0, r2
 800102e:	ea81 0303 	eor.w	r3, r1, r3
 8001032:	2d36      	cmp	r5, #54	; 0x36
 8001034:	bf88      	it	hi
 8001036:	bd30      	pophi	{r4, r5, pc}
 8001038:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800103c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8001040:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8001044:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8001048:	d002      	beq.n	8001050 <__adddf3+0x70>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8001054:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8001058:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800105c:	d002      	beq.n	8001064 <__adddf3+0x84>
 800105e:	4252      	negs	r2, r2
 8001060:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001064:	ea94 0f05 	teq	r4, r5
 8001068:	f000 80a7 	beq.w	80011ba <__adddf3+0x1da>
 800106c:	f1a4 0401 	sub.w	r4, r4, #1
 8001070:	f1d5 0e20 	rsbs	lr, r5, #32
 8001074:	db0d      	blt.n	8001092 <__adddf3+0xb2>
 8001076:	fa02 fc0e 	lsl.w	ip, r2, lr
 800107a:	fa22 f205 	lsr.w	r2, r2, r5
 800107e:	1880      	adds	r0, r0, r2
 8001080:	f141 0100 	adc.w	r1, r1, #0
 8001084:	fa03 f20e 	lsl.w	r2, r3, lr
 8001088:	1880      	adds	r0, r0, r2
 800108a:	fa43 f305 	asr.w	r3, r3, r5
 800108e:	4159      	adcs	r1, r3
 8001090:	e00e      	b.n	80010b0 <__adddf3+0xd0>
 8001092:	f1a5 0520 	sub.w	r5, r5, #32
 8001096:	f10e 0e20 	add.w	lr, lr, #32
 800109a:	2a01      	cmp	r2, #1
 800109c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80010a0:	bf28      	it	cs
 80010a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80010a6:	fa43 f305 	asr.w	r3, r3, r5
 80010aa:	18c0      	adds	r0, r0, r3
 80010ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80010b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80010b4:	d507      	bpl.n	80010c6 <__adddf3+0xe6>
 80010b6:	f04f 0e00 	mov.w	lr, #0
 80010ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80010be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80010c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80010c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80010ca:	d31b      	bcc.n	8001104 <__adddf3+0x124>
 80010cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80010d0:	d30c      	bcc.n	80010ec <__adddf3+0x10c>
 80010d2:	0849      	lsrs	r1, r1, #1
 80010d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80010d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80010dc:	f104 0401 	add.w	r4, r4, #1
 80010e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80010e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80010e8:	f080 809a 	bcs.w	8001220 <__adddf3+0x240>
 80010ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80010f0:	bf08      	it	eq
 80010f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80010f6:	f150 0000 	adcs.w	r0, r0, #0
 80010fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80010fe:	ea41 0105 	orr.w	r1, r1, r5
 8001102:	bd30      	pop	{r4, r5, pc}
 8001104:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8001108:	4140      	adcs	r0, r0
 800110a:	eb41 0101 	adc.w	r1, r1, r1
 800110e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001112:	f1a4 0401 	sub.w	r4, r4, #1
 8001116:	d1e9      	bne.n	80010ec <__adddf3+0x10c>
 8001118:	f091 0f00 	teq	r1, #0
 800111c:	bf04      	itt	eq
 800111e:	4601      	moveq	r1, r0
 8001120:	2000      	moveq	r0, #0
 8001122:	fab1 f381 	clz	r3, r1
 8001126:	bf08      	it	eq
 8001128:	3320      	addeq	r3, #32
 800112a:	f1a3 030b 	sub.w	r3, r3, #11
 800112e:	f1b3 0220 	subs.w	r2, r3, #32
 8001132:	da0c      	bge.n	800114e <__adddf3+0x16e>
 8001134:	320c      	adds	r2, #12
 8001136:	dd08      	ble.n	800114a <__adddf3+0x16a>
 8001138:	f102 0c14 	add.w	ip, r2, #20
 800113c:	f1c2 020c 	rsb	r2, r2, #12
 8001140:	fa01 f00c 	lsl.w	r0, r1, ip
 8001144:	fa21 f102 	lsr.w	r1, r1, r2
 8001148:	e00c      	b.n	8001164 <__adddf3+0x184>
 800114a:	f102 0214 	add.w	r2, r2, #20
 800114e:	bfd8      	it	le
 8001150:	f1c2 0c20 	rsble	ip, r2, #32
 8001154:	fa01 f102 	lsl.w	r1, r1, r2
 8001158:	fa20 fc0c 	lsr.w	ip, r0, ip
 800115c:	bfdc      	itt	le
 800115e:	ea41 010c 	orrle.w	r1, r1, ip
 8001162:	4090      	lslle	r0, r2
 8001164:	1ae4      	subs	r4, r4, r3
 8001166:	bfa2      	ittt	ge
 8001168:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800116c:	4329      	orrge	r1, r5
 800116e:	bd30      	popge	{r4, r5, pc}
 8001170:	ea6f 0404 	mvn.w	r4, r4
 8001174:	3c1f      	subs	r4, #31
 8001176:	da1c      	bge.n	80011b2 <__adddf3+0x1d2>
 8001178:	340c      	adds	r4, #12
 800117a:	dc0e      	bgt.n	800119a <__adddf3+0x1ba>
 800117c:	f104 0414 	add.w	r4, r4, #20
 8001180:	f1c4 0220 	rsb	r2, r4, #32
 8001184:	fa20 f004 	lsr.w	r0, r0, r4
 8001188:	fa01 f302 	lsl.w	r3, r1, r2
 800118c:	ea40 0003 	orr.w	r0, r0, r3
 8001190:	fa21 f304 	lsr.w	r3, r1, r4
 8001194:	ea45 0103 	orr.w	r1, r5, r3
 8001198:	bd30      	pop	{r4, r5, pc}
 800119a:	f1c4 040c 	rsb	r4, r4, #12
 800119e:	f1c4 0220 	rsb	r2, r4, #32
 80011a2:	fa20 f002 	lsr.w	r0, r0, r2
 80011a6:	fa01 f304 	lsl.w	r3, r1, r4
 80011aa:	ea40 0003 	orr.w	r0, r0, r3
 80011ae:	4629      	mov	r1, r5
 80011b0:	bd30      	pop	{r4, r5, pc}
 80011b2:	fa21 f004 	lsr.w	r0, r1, r4
 80011b6:	4629      	mov	r1, r5
 80011b8:	bd30      	pop	{r4, r5, pc}
 80011ba:	f094 0f00 	teq	r4, #0
 80011be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80011c2:	bf06      	itte	eq
 80011c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80011c8:	3401      	addeq	r4, #1
 80011ca:	3d01      	subne	r5, #1
 80011cc:	e74e      	b.n	800106c <__adddf3+0x8c>
 80011ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80011d2:	bf18      	it	ne
 80011d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80011d8:	d029      	beq.n	800122e <__adddf3+0x24e>
 80011da:	ea94 0f05 	teq	r4, r5
 80011de:	bf08      	it	eq
 80011e0:	ea90 0f02 	teqeq	r0, r2
 80011e4:	d005      	beq.n	80011f2 <__adddf3+0x212>
 80011e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80011ea:	bf04      	itt	eq
 80011ec:	4619      	moveq	r1, r3
 80011ee:	4610      	moveq	r0, r2
 80011f0:	bd30      	pop	{r4, r5, pc}
 80011f2:	ea91 0f03 	teq	r1, r3
 80011f6:	bf1e      	ittt	ne
 80011f8:	2100      	movne	r1, #0
 80011fa:	2000      	movne	r0, #0
 80011fc:	bd30      	popne	{r4, r5, pc}
 80011fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8001202:	d105      	bne.n	8001210 <__adddf3+0x230>
 8001204:	0040      	lsls	r0, r0, #1
 8001206:	4149      	adcs	r1, r1
 8001208:	bf28      	it	cs
 800120a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800120e:	bd30      	pop	{r4, r5, pc}
 8001210:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8001214:	bf3c      	itt	cc
 8001216:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800121a:	bd30      	popcc	{r4, r5, pc}
 800121c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001220:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8001224:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001228:	f04f 0000 	mov.w	r0, #0
 800122c:	bd30      	pop	{r4, r5, pc}
 800122e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8001232:	bf1a      	itte	ne
 8001234:	4619      	movne	r1, r3
 8001236:	4610      	movne	r0, r2
 8001238:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800123c:	bf1c      	itt	ne
 800123e:	460b      	movne	r3, r1
 8001240:	4602      	movne	r2, r0
 8001242:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001246:	bf06      	itte	eq
 8001248:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800124c:	ea91 0f03 	teqeq	r1, r3
 8001250:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8001254:	bd30      	pop	{r4, r5, pc}
 8001256:	bf00      	nop

08001258 <__aeabi_ui2d>:
 8001258:	f090 0f00 	teq	r0, #0
 800125c:	bf04      	itt	eq
 800125e:	2100      	moveq	r1, #0
 8001260:	4770      	bxeq	lr
 8001262:	b530      	push	{r4, r5, lr}
 8001264:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001268:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800126c:	f04f 0500 	mov.w	r5, #0
 8001270:	f04f 0100 	mov.w	r1, #0
 8001274:	e750      	b.n	8001118 <__adddf3+0x138>
 8001276:	bf00      	nop

08001278 <__aeabi_i2d>:
 8001278:	f090 0f00 	teq	r0, #0
 800127c:	bf04      	itt	eq
 800127e:	2100      	moveq	r1, #0
 8001280:	4770      	bxeq	lr
 8001282:	b530      	push	{r4, r5, lr}
 8001284:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001288:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800128c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8001290:	bf48      	it	mi
 8001292:	4240      	negmi	r0, r0
 8001294:	f04f 0100 	mov.w	r1, #0
 8001298:	e73e      	b.n	8001118 <__adddf3+0x138>
 800129a:	bf00      	nop

0800129c <__aeabi_f2d>:
 800129c:	0042      	lsls	r2, r0, #1
 800129e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80012a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80012a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80012aa:	bf1f      	itttt	ne
 80012ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80012b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80012b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80012b8:	4770      	bxne	lr
 80012ba:	f092 0f00 	teq	r2, #0
 80012be:	bf14      	ite	ne
 80012c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80012c4:	4770      	bxeq	lr
 80012c6:	b530      	push	{r4, r5, lr}
 80012c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80012cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80012d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80012d4:	e720      	b.n	8001118 <__adddf3+0x138>
 80012d6:	bf00      	nop

080012d8 <__aeabi_ul2d>:
 80012d8:	ea50 0201 	orrs.w	r2, r0, r1
 80012dc:	bf08      	it	eq
 80012de:	4770      	bxeq	lr
 80012e0:	b530      	push	{r4, r5, lr}
 80012e2:	f04f 0500 	mov.w	r5, #0
 80012e6:	e00a      	b.n	80012fe <__aeabi_l2d+0x16>

080012e8 <__aeabi_l2d>:
 80012e8:	ea50 0201 	orrs.w	r2, r0, r1
 80012ec:	bf08      	it	eq
 80012ee:	4770      	bxeq	lr
 80012f0:	b530      	push	{r4, r5, lr}
 80012f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80012f6:	d502      	bpl.n	80012fe <__aeabi_l2d+0x16>
 80012f8:	4240      	negs	r0, r0
 80012fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001302:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8001306:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800130a:	f43f aedc 	beq.w	80010c6 <__adddf3+0xe6>
 800130e:	f04f 0203 	mov.w	r2, #3
 8001312:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001316:	bf18      	it	ne
 8001318:	3203      	addne	r2, #3
 800131a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800131e:	bf18      	it	ne
 8001320:	3203      	addne	r2, #3
 8001322:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8001326:	f1c2 0320 	rsb	r3, r2, #32
 800132a:	fa00 fc03 	lsl.w	ip, r0, r3
 800132e:	fa20 f002 	lsr.w	r0, r0, r2
 8001332:	fa01 fe03 	lsl.w	lr, r1, r3
 8001336:	ea40 000e 	orr.w	r0, r0, lr
 800133a:	fa21 f102 	lsr.w	r1, r1, r2
 800133e:	4414      	add	r4, r2
 8001340:	e6c1      	b.n	80010c6 <__adddf3+0xe6>
 8001342:	bf00      	nop

08001344 <__aeabi_dmul>:
 8001344:	b570      	push	{r4, r5, r6, lr}
 8001346:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800134a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800134e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8001352:	bf1d      	ittte	ne
 8001354:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001358:	ea94 0f0c 	teqne	r4, ip
 800135c:	ea95 0f0c 	teqne	r5, ip
 8001360:	f000 f8de 	bleq	8001520 <__aeabi_dmul+0x1dc>
 8001364:	442c      	add	r4, r5
 8001366:	ea81 0603 	eor.w	r6, r1, r3
 800136a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800136e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8001372:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8001376:	bf18      	it	ne
 8001378:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800137c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001384:	d038      	beq.n	80013f8 <__aeabi_dmul+0xb4>
 8001386:	fba0 ce02 	umull	ip, lr, r0, r2
 800138a:	f04f 0500 	mov.w	r5, #0
 800138e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8001392:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8001396:	fbe0 e503 	umlal	lr, r5, r0, r3
 800139a:	f04f 0600 	mov.w	r6, #0
 800139e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80013a2:	f09c 0f00 	teq	ip, #0
 80013a6:	bf18      	it	ne
 80013a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80013ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80013b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80013b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80013b8:	d204      	bcs.n	80013c4 <__aeabi_dmul+0x80>
 80013ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80013be:	416d      	adcs	r5, r5
 80013c0:	eb46 0606 	adc.w	r6, r6, r6
 80013c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80013c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80013cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80013d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80013d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80013d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80013dc:	bf88      	it	hi
 80013de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80013e2:	d81e      	bhi.n	8001422 <__aeabi_dmul+0xde>
 80013e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80013e8:	bf08      	it	eq
 80013ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80013ee:	f150 0000 	adcs.w	r0, r0, #0
 80013f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80013f6:	bd70      	pop	{r4, r5, r6, pc}
 80013f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80013fc:	ea46 0101 	orr.w	r1, r6, r1
 8001400:	ea40 0002 	orr.w	r0, r0, r2
 8001404:	ea81 0103 	eor.w	r1, r1, r3
 8001408:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800140c:	bfc2      	ittt	gt
 800140e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001412:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001416:	bd70      	popgt	{r4, r5, r6, pc}
 8001418:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800141c:	f04f 0e00 	mov.w	lr, #0
 8001420:	3c01      	subs	r4, #1
 8001422:	f300 80ab 	bgt.w	800157c <__aeabi_dmul+0x238>
 8001426:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800142a:	bfde      	ittt	le
 800142c:	2000      	movle	r0, #0
 800142e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8001432:	bd70      	pople	{r4, r5, r6, pc}
 8001434:	f1c4 0400 	rsb	r4, r4, #0
 8001438:	3c20      	subs	r4, #32
 800143a:	da35      	bge.n	80014a8 <__aeabi_dmul+0x164>
 800143c:	340c      	adds	r4, #12
 800143e:	dc1b      	bgt.n	8001478 <__aeabi_dmul+0x134>
 8001440:	f104 0414 	add.w	r4, r4, #20
 8001444:	f1c4 0520 	rsb	r5, r4, #32
 8001448:	fa00 f305 	lsl.w	r3, r0, r5
 800144c:	fa20 f004 	lsr.w	r0, r0, r4
 8001450:	fa01 f205 	lsl.w	r2, r1, r5
 8001454:	ea40 0002 	orr.w	r0, r0, r2
 8001458:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800145c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001460:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001464:	fa21 f604 	lsr.w	r6, r1, r4
 8001468:	eb42 0106 	adc.w	r1, r2, r6
 800146c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001470:	bf08      	it	eq
 8001472:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001476:	bd70      	pop	{r4, r5, r6, pc}
 8001478:	f1c4 040c 	rsb	r4, r4, #12
 800147c:	f1c4 0520 	rsb	r5, r4, #32
 8001480:	fa00 f304 	lsl.w	r3, r0, r4
 8001484:	fa20 f005 	lsr.w	r0, r0, r5
 8001488:	fa01 f204 	lsl.w	r2, r1, r4
 800148c:	ea40 0002 	orr.w	r0, r0, r2
 8001490:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001494:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001498:	f141 0100 	adc.w	r1, r1, #0
 800149c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80014a0:	bf08      	it	eq
 80014a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80014a6:	bd70      	pop	{r4, r5, r6, pc}
 80014a8:	f1c4 0520 	rsb	r5, r4, #32
 80014ac:	fa00 f205 	lsl.w	r2, r0, r5
 80014b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80014b4:	fa20 f304 	lsr.w	r3, r0, r4
 80014b8:	fa01 f205 	lsl.w	r2, r1, r5
 80014bc:	ea43 0302 	orr.w	r3, r3, r2
 80014c0:	fa21 f004 	lsr.w	r0, r1, r4
 80014c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80014c8:	fa21 f204 	lsr.w	r2, r1, r4
 80014cc:	ea20 0002 	bic.w	r0, r0, r2
 80014d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80014d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80014d8:	bf08      	it	eq
 80014da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80014de:	bd70      	pop	{r4, r5, r6, pc}
 80014e0:	f094 0f00 	teq	r4, #0
 80014e4:	d10f      	bne.n	8001506 <__aeabi_dmul+0x1c2>
 80014e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80014ea:	0040      	lsls	r0, r0, #1
 80014ec:	eb41 0101 	adc.w	r1, r1, r1
 80014f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80014f4:	bf08      	it	eq
 80014f6:	3c01      	subeq	r4, #1
 80014f8:	d0f7      	beq.n	80014ea <__aeabi_dmul+0x1a6>
 80014fa:	ea41 0106 	orr.w	r1, r1, r6
 80014fe:	f095 0f00 	teq	r5, #0
 8001502:	bf18      	it	ne
 8001504:	4770      	bxne	lr
 8001506:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800150a:	0052      	lsls	r2, r2, #1
 800150c:	eb43 0303 	adc.w	r3, r3, r3
 8001510:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001514:	bf08      	it	eq
 8001516:	3d01      	subeq	r5, #1
 8001518:	d0f7      	beq.n	800150a <__aeabi_dmul+0x1c6>
 800151a:	ea43 0306 	orr.w	r3, r3, r6
 800151e:	4770      	bx	lr
 8001520:	ea94 0f0c 	teq	r4, ip
 8001524:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8001528:	bf18      	it	ne
 800152a:	ea95 0f0c 	teqne	r5, ip
 800152e:	d00c      	beq.n	800154a <__aeabi_dmul+0x206>
 8001530:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001534:	bf18      	it	ne
 8001536:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800153a:	d1d1      	bne.n	80014e0 <__aeabi_dmul+0x19c>
 800153c:	ea81 0103 	eor.w	r1, r1, r3
 8001540:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001544:	f04f 0000 	mov.w	r0, #0
 8001548:	bd70      	pop	{r4, r5, r6, pc}
 800154a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800154e:	bf06      	itte	eq
 8001550:	4610      	moveq	r0, r2
 8001552:	4619      	moveq	r1, r3
 8001554:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001558:	d019      	beq.n	800158e <__aeabi_dmul+0x24a>
 800155a:	ea94 0f0c 	teq	r4, ip
 800155e:	d102      	bne.n	8001566 <__aeabi_dmul+0x222>
 8001560:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8001564:	d113      	bne.n	800158e <__aeabi_dmul+0x24a>
 8001566:	ea95 0f0c 	teq	r5, ip
 800156a:	d105      	bne.n	8001578 <__aeabi_dmul+0x234>
 800156c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8001570:	bf1c      	itt	ne
 8001572:	4610      	movne	r0, r2
 8001574:	4619      	movne	r1, r3
 8001576:	d10a      	bne.n	800158e <__aeabi_dmul+0x24a>
 8001578:	ea81 0103 	eor.w	r1, r1, r3
 800157c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001580:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001584:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001588:	f04f 0000 	mov.w	r0, #0
 800158c:	bd70      	pop	{r4, r5, r6, pc}
 800158e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001592:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8001596:	bd70      	pop	{r4, r5, r6, pc}

08001598 <__aeabi_ddiv>:
 8001598:	b570      	push	{r4, r5, r6, lr}
 800159a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800159e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80015a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80015a6:	bf1d      	ittte	ne
 80015a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80015ac:	ea94 0f0c 	teqne	r4, ip
 80015b0:	ea95 0f0c 	teqne	r5, ip
 80015b4:	f000 f8a7 	bleq	8001706 <__aeabi_ddiv+0x16e>
 80015b8:	eba4 0405 	sub.w	r4, r4, r5
 80015bc:	ea81 0e03 	eor.w	lr, r1, r3
 80015c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80015c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80015c8:	f000 8088 	beq.w	80016dc <__aeabi_ddiv+0x144>
 80015cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80015d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80015d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80015d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80015dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80015e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80015e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80015e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80015ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80015f0:	429d      	cmp	r5, r3
 80015f2:	bf08      	it	eq
 80015f4:	4296      	cmpeq	r6, r2
 80015f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80015fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80015fe:	d202      	bcs.n	8001606 <__aeabi_ddiv+0x6e>
 8001600:	085b      	lsrs	r3, r3, #1
 8001602:	ea4f 0232 	mov.w	r2, r2, rrx
 8001606:	1ab6      	subs	r6, r6, r2
 8001608:	eb65 0503 	sbc.w	r5, r5, r3
 800160c:	085b      	lsrs	r3, r3, #1
 800160e:	ea4f 0232 	mov.w	r2, r2, rrx
 8001612:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001616:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800161a:	ebb6 0e02 	subs.w	lr, r6, r2
 800161e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001622:	bf22      	ittt	cs
 8001624:	1ab6      	subcs	r6, r6, r2
 8001626:	4675      	movcs	r5, lr
 8001628:	ea40 000c 	orrcs.w	r0, r0, ip
 800162c:	085b      	lsrs	r3, r3, #1
 800162e:	ea4f 0232 	mov.w	r2, r2, rrx
 8001632:	ebb6 0e02 	subs.w	lr, r6, r2
 8001636:	eb75 0e03 	sbcs.w	lr, r5, r3
 800163a:	bf22      	ittt	cs
 800163c:	1ab6      	subcs	r6, r6, r2
 800163e:	4675      	movcs	r5, lr
 8001640:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001644:	085b      	lsrs	r3, r3, #1
 8001646:	ea4f 0232 	mov.w	r2, r2, rrx
 800164a:	ebb6 0e02 	subs.w	lr, r6, r2
 800164e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001652:	bf22      	ittt	cs
 8001654:	1ab6      	subcs	r6, r6, r2
 8001656:	4675      	movcs	r5, lr
 8001658:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800165c:	085b      	lsrs	r3, r3, #1
 800165e:	ea4f 0232 	mov.w	r2, r2, rrx
 8001662:	ebb6 0e02 	subs.w	lr, r6, r2
 8001666:	eb75 0e03 	sbcs.w	lr, r5, r3
 800166a:	bf22      	ittt	cs
 800166c:	1ab6      	subcs	r6, r6, r2
 800166e:	4675      	movcs	r5, lr
 8001670:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001674:	ea55 0e06 	orrs.w	lr, r5, r6
 8001678:	d018      	beq.n	80016ac <__aeabi_ddiv+0x114>
 800167a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800167e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8001682:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8001686:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800168a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800168e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8001692:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8001696:	d1c0      	bne.n	800161a <__aeabi_ddiv+0x82>
 8001698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800169c:	d10b      	bne.n	80016b6 <__aeabi_ddiv+0x11e>
 800169e:	ea41 0100 	orr.w	r1, r1, r0
 80016a2:	f04f 0000 	mov.w	r0, #0
 80016a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80016aa:	e7b6      	b.n	800161a <__aeabi_ddiv+0x82>
 80016ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80016b0:	bf04      	itt	eq
 80016b2:	4301      	orreq	r1, r0
 80016b4:	2000      	moveq	r0, #0
 80016b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80016ba:	bf88      	it	hi
 80016bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80016c0:	f63f aeaf 	bhi.w	8001422 <__aeabi_dmul+0xde>
 80016c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80016c8:	bf04      	itt	eq
 80016ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80016ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80016d2:	f150 0000 	adcs.w	r0, r0, #0
 80016d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80016da:	bd70      	pop	{r4, r5, r6, pc}
 80016dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80016e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80016e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80016e8:	bfc2      	ittt	gt
 80016ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80016ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80016f2:	bd70      	popgt	{r4, r5, r6, pc}
 80016f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80016f8:	f04f 0e00 	mov.w	lr, #0
 80016fc:	3c01      	subs	r4, #1
 80016fe:	e690      	b.n	8001422 <__aeabi_dmul+0xde>
 8001700:	ea45 0e06 	orr.w	lr, r5, r6
 8001704:	e68d      	b.n	8001422 <__aeabi_dmul+0xde>
 8001706:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800170a:	ea94 0f0c 	teq	r4, ip
 800170e:	bf08      	it	eq
 8001710:	ea95 0f0c 	teqeq	r5, ip
 8001714:	f43f af3b 	beq.w	800158e <__aeabi_dmul+0x24a>
 8001718:	ea94 0f0c 	teq	r4, ip
 800171c:	d10a      	bne.n	8001734 <__aeabi_ddiv+0x19c>
 800171e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001722:	f47f af34 	bne.w	800158e <__aeabi_dmul+0x24a>
 8001726:	ea95 0f0c 	teq	r5, ip
 800172a:	f47f af25 	bne.w	8001578 <__aeabi_dmul+0x234>
 800172e:	4610      	mov	r0, r2
 8001730:	4619      	mov	r1, r3
 8001732:	e72c      	b.n	800158e <__aeabi_dmul+0x24a>
 8001734:	ea95 0f0c 	teq	r5, ip
 8001738:	d106      	bne.n	8001748 <__aeabi_ddiv+0x1b0>
 800173a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800173e:	f43f aefd 	beq.w	800153c <__aeabi_dmul+0x1f8>
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	e722      	b.n	800158e <__aeabi_dmul+0x24a>
 8001748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800174c:	bf18      	it	ne
 800174e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001752:	f47f aec5 	bne.w	80014e0 <__aeabi_dmul+0x19c>
 8001756:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800175a:	f47f af0d 	bne.w	8001578 <__aeabi_dmul+0x234>
 800175e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8001762:	f47f aeeb 	bne.w	800153c <__aeabi_dmul+0x1f8>
 8001766:	e712      	b.n	800158e <__aeabi_dmul+0x24a>

08001768 <__aeabi_d2iz>:
 8001768:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800176c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001770:	d215      	bcs.n	800179e <__aeabi_d2iz+0x36>
 8001772:	d511      	bpl.n	8001798 <__aeabi_d2iz+0x30>
 8001774:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001778:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800177c:	d912      	bls.n	80017a4 <__aeabi_d2iz+0x3c>
 800177e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001782:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001786:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800178a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800178e:	fa23 f002 	lsr.w	r0, r3, r2
 8001792:	bf18      	it	ne
 8001794:	4240      	negne	r0, r0
 8001796:	4770      	bx	lr
 8001798:	f04f 0000 	mov.w	r0, #0
 800179c:	4770      	bx	lr
 800179e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80017a2:	d105      	bne.n	80017b0 <__aeabi_d2iz+0x48>
 80017a4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80017a8:	bf08      	it	eq
 80017aa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80017ae:	4770      	bx	lr
 80017b0:	f04f 0000 	mov.w	r0, #0
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop

080017b8 <__aeabi_frsub>:
 80017b8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80017bc:	e002      	b.n	80017c4 <__addsf3>
 80017be:	bf00      	nop

080017c0 <__aeabi_fsub>:
 80017c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080017c4 <__addsf3>:
 80017c4:	0042      	lsls	r2, r0, #1
 80017c6:	bf1f      	itttt	ne
 80017c8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80017cc:	ea92 0f03 	teqne	r2, r3
 80017d0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80017d4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80017d8:	d06a      	beq.n	80018b0 <__addsf3+0xec>
 80017da:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80017de:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80017e2:	bfc1      	itttt	gt
 80017e4:	18d2      	addgt	r2, r2, r3
 80017e6:	4041      	eorgt	r1, r0
 80017e8:	4048      	eorgt	r0, r1
 80017ea:	4041      	eorgt	r1, r0
 80017ec:	bfb8      	it	lt
 80017ee:	425b      	neglt	r3, r3
 80017f0:	2b19      	cmp	r3, #25
 80017f2:	bf88      	it	hi
 80017f4:	4770      	bxhi	lr
 80017f6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80017fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80017fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001802:	bf18      	it	ne
 8001804:	4240      	negne	r0, r0
 8001806:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800180a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800180e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8001812:	bf18      	it	ne
 8001814:	4249      	negne	r1, r1
 8001816:	ea92 0f03 	teq	r2, r3
 800181a:	d03f      	beq.n	800189c <__addsf3+0xd8>
 800181c:	f1a2 0201 	sub.w	r2, r2, #1
 8001820:	fa41 fc03 	asr.w	ip, r1, r3
 8001824:	eb10 000c 	adds.w	r0, r0, ip
 8001828:	f1c3 0320 	rsb	r3, r3, #32
 800182c:	fa01 f103 	lsl.w	r1, r1, r3
 8001830:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8001834:	d502      	bpl.n	800183c <__addsf3+0x78>
 8001836:	4249      	negs	r1, r1
 8001838:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800183c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8001840:	d313      	bcc.n	800186a <__addsf3+0xa6>
 8001842:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001846:	d306      	bcc.n	8001856 <__addsf3+0x92>
 8001848:	0840      	lsrs	r0, r0, #1
 800184a:	ea4f 0131 	mov.w	r1, r1, rrx
 800184e:	f102 0201 	add.w	r2, r2, #1
 8001852:	2afe      	cmp	r2, #254	; 0xfe
 8001854:	d251      	bcs.n	80018fa <__addsf3+0x136>
 8001856:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800185a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800185e:	bf08      	it	eq
 8001860:	f020 0001 	biceq.w	r0, r0, #1
 8001864:	ea40 0003 	orr.w	r0, r0, r3
 8001868:	4770      	bx	lr
 800186a:	0049      	lsls	r1, r1, #1
 800186c:	eb40 0000 	adc.w	r0, r0, r0
 8001870:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8001874:	f1a2 0201 	sub.w	r2, r2, #1
 8001878:	d1ed      	bne.n	8001856 <__addsf3+0x92>
 800187a:	fab0 fc80 	clz	ip, r0
 800187e:	f1ac 0c08 	sub.w	ip, ip, #8
 8001882:	ebb2 020c 	subs.w	r2, r2, ip
 8001886:	fa00 f00c 	lsl.w	r0, r0, ip
 800188a:	bfaa      	itet	ge
 800188c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8001890:	4252      	neglt	r2, r2
 8001892:	4318      	orrge	r0, r3
 8001894:	bfbc      	itt	lt
 8001896:	40d0      	lsrlt	r0, r2
 8001898:	4318      	orrlt	r0, r3
 800189a:	4770      	bx	lr
 800189c:	f092 0f00 	teq	r2, #0
 80018a0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80018a4:	bf06      	itte	eq
 80018a6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80018aa:	3201      	addeq	r2, #1
 80018ac:	3b01      	subne	r3, #1
 80018ae:	e7b5      	b.n	800181c <__addsf3+0x58>
 80018b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80018b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80018b8:	bf18      	it	ne
 80018ba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80018be:	d021      	beq.n	8001904 <__addsf3+0x140>
 80018c0:	ea92 0f03 	teq	r2, r3
 80018c4:	d004      	beq.n	80018d0 <__addsf3+0x10c>
 80018c6:	f092 0f00 	teq	r2, #0
 80018ca:	bf08      	it	eq
 80018cc:	4608      	moveq	r0, r1
 80018ce:	4770      	bx	lr
 80018d0:	ea90 0f01 	teq	r0, r1
 80018d4:	bf1c      	itt	ne
 80018d6:	2000      	movne	r0, #0
 80018d8:	4770      	bxne	lr
 80018da:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80018de:	d104      	bne.n	80018ea <__addsf3+0x126>
 80018e0:	0040      	lsls	r0, r0, #1
 80018e2:	bf28      	it	cs
 80018e4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80018e8:	4770      	bx	lr
 80018ea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80018ee:	bf3c      	itt	cc
 80018f0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80018f4:	4770      	bxcc	lr
 80018f6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80018fa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80018fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001902:	4770      	bx	lr
 8001904:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8001908:	bf16      	itet	ne
 800190a:	4608      	movne	r0, r1
 800190c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8001910:	4601      	movne	r1, r0
 8001912:	0242      	lsls	r2, r0, #9
 8001914:	bf06      	itte	eq
 8001916:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800191a:	ea90 0f01 	teqeq	r0, r1
 800191e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8001922:	4770      	bx	lr

08001924 <__aeabi_ui2f>:
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	e004      	b.n	8001934 <__aeabi_i2f+0x8>
 800192a:	bf00      	nop

0800192c <__aeabi_i2f>:
 800192c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8001930:	bf48      	it	mi
 8001932:	4240      	negmi	r0, r0
 8001934:	ea5f 0c00 	movs.w	ip, r0
 8001938:	bf08      	it	eq
 800193a:	4770      	bxeq	lr
 800193c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8001940:	4601      	mov	r1, r0
 8001942:	f04f 0000 	mov.w	r0, #0
 8001946:	e01c      	b.n	8001982 <__aeabi_l2f+0x2a>

08001948 <__aeabi_ul2f>:
 8001948:	ea50 0201 	orrs.w	r2, r0, r1
 800194c:	bf08      	it	eq
 800194e:	4770      	bxeq	lr
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	e00a      	b.n	800196c <__aeabi_l2f+0x14>
 8001956:	bf00      	nop

08001958 <__aeabi_l2f>:
 8001958:	ea50 0201 	orrs.w	r2, r0, r1
 800195c:	bf08      	it	eq
 800195e:	4770      	bxeq	lr
 8001960:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8001964:	d502      	bpl.n	800196c <__aeabi_l2f+0x14>
 8001966:	4240      	negs	r0, r0
 8001968:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800196c:	ea5f 0c01 	movs.w	ip, r1
 8001970:	bf02      	ittt	eq
 8001972:	4684      	moveq	ip, r0
 8001974:	4601      	moveq	r1, r0
 8001976:	2000      	moveq	r0, #0
 8001978:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800197c:	bf08      	it	eq
 800197e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8001982:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8001986:	fabc f28c 	clz	r2, ip
 800198a:	3a08      	subs	r2, #8
 800198c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8001990:	db10      	blt.n	80019b4 <__aeabi_l2f+0x5c>
 8001992:	fa01 fc02 	lsl.w	ip, r1, r2
 8001996:	4463      	add	r3, ip
 8001998:	fa00 fc02 	lsl.w	ip, r0, r2
 800199c:	f1c2 0220 	rsb	r2, r2, #32
 80019a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80019a4:	fa20 f202 	lsr.w	r2, r0, r2
 80019a8:	eb43 0002 	adc.w	r0, r3, r2
 80019ac:	bf08      	it	eq
 80019ae:	f020 0001 	biceq.w	r0, r0, #1
 80019b2:	4770      	bx	lr
 80019b4:	f102 0220 	add.w	r2, r2, #32
 80019b8:	fa01 fc02 	lsl.w	ip, r1, r2
 80019bc:	f1c2 0220 	rsb	r2, r2, #32
 80019c0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80019c4:	fa21 f202 	lsr.w	r2, r1, r2
 80019c8:	eb43 0002 	adc.w	r0, r3, r2
 80019cc:	bf08      	it	eq
 80019ce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80019d2:	4770      	bx	lr

080019d4 <__aeabi_fmul>:
 80019d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80019d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80019dc:	bf1e      	ittt	ne
 80019de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80019e2:	ea92 0f0c 	teqne	r2, ip
 80019e6:	ea93 0f0c 	teqne	r3, ip
 80019ea:	d06f      	beq.n	8001acc <__aeabi_fmul+0xf8>
 80019ec:	441a      	add	r2, r3
 80019ee:	ea80 0c01 	eor.w	ip, r0, r1
 80019f2:	0240      	lsls	r0, r0, #9
 80019f4:	bf18      	it	ne
 80019f6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80019fa:	d01e      	beq.n	8001a3a <__aeabi_fmul+0x66>
 80019fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8001a04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8001a08:	fba0 3101 	umull	r3, r1, r0, r1
 8001a0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001a10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001a14:	bf3e      	ittt	cc
 8001a16:	0049      	lslcc	r1, r1, #1
 8001a18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8001a1c:	005b      	lslcc	r3, r3, #1
 8001a1e:	ea40 0001 	orr.w	r0, r0, r1
 8001a22:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8001a26:	2afd      	cmp	r2, #253	; 0xfd
 8001a28:	d81d      	bhi.n	8001a66 <__aeabi_fmul+0x92>
 8001a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001a32:	bf08      	it	eq
 8001a34:	f020 0001 	biceq.w	r0, r0, #1
 8001a38:	4770      	bx	lr
 8001a3a:	f090 0f00 	teq	r0, #0
 8001a3e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001a42:	bf08      	it	eq
 8001a44:	0249      	lsleq	r1, r1, #9
 8001a46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001a4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8001a4e:	3a7f      	subs	r2, #127	; 0x7f
 8001a50:	bfc2      	ittt	gt
 8001a52:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001a56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001a5a:	4770      	bxgt	lr
 8001a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	3a01      	subs	r2, #1
 8001a66:	dc5d      	bgt.n	8001b24 <__aeabi_fmul+0x150>
 8001a68:	f112 0f19 	cmn.w	r2, #25
 8001a6c:	bfdc      	itt	le
 8001a6e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8001a72:	4770      	bxle	lr
 8001a74:	f1c2 0200 	rsb	r2, r2, #0
 8001a78:	0041      	lsls	r1, r0, #1
 8001a7a:	fa21 f102 	lsr.w	r1, r1, r2
 8001a7e:	f1c2 0220 	rsb	r2, r2, #32
 8001a82:	fa00 fc02 	lsl.w	ip, r0, r2
 8001a86:	ea5f 0031 	movs.w	r0, r1, rrx
 8001a8a:	f140 0000 	adc.w	r0, r0, #0
 8001a8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8001a92:	bf08      	it	eq
 8001a94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8001a98:	4770      	bx	lr
 8001a9a:	f092 0f00 	teq	r2, #0
 8001a9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001aa2:	bf02      	ittt	eq
 8001aa4:	0040      	lsleq	r0, r0, #1
 8001aa6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001aaa:	3a01      	subeq	r2, #1
 8001aac:	d0f9      	beq.n	8001aa2 <__aeabi_fmul+0xce>
 8001aae:	ea40 000c 	orr.w	r0, r0, ip
 8001ab2:	f093 0f00 	teq	r3, #0
 8001ab6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001aba:	bf02      	ittt	eq
 8001abc:	0049      	lsleq	r1, r1, #1
 8001abe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001ac2:	3b01      	subeq	r3, #1
 8001ac4:	d0f9      	beq.n	8001aba <__aeabi_fmul+0xe6>
 8001ac6:	ea41 010c 	orr.w	r1, r1, ip
 8001aca:	e78f      	b.n	80019ec <__aeabi_fmul+0x18>
 8001acc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001ad0:	ea92 0f0c 	teq	r2, ip
 8001ad4:	bf18      	it	ne
 8001ad6:	ea93 0f0c 	teqne	r3, ip
 8001ada:	d00a      	beq.n	8001af2 <__aeabi_fmul+0x11e>
 8001adc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001ae0:	bf18      	it	ne
 8001ae2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001ae6:	d1d8      	bne.n	8001a9a <__aeabi_fmul+0xc6>
 8001ae8:	ea80 0001 	eor.w	r0, r0, r1
 8001aec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001af0:	4770      	bx	lr
 8001af2:	f090 0f00 	teq	r0, #0
 8001af6:	bf17      	itett	ne
 8001af8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8001afc:	4608      	moveq	r0, r1
 8001afe:	f091 0f00 	teqne	r1, #0
 8001b02:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8001b06:	d014      	beq.n	8001b32 <__aeabi_fmul+0x15e>
 8001b08:	ea92 0f0c 	teq	r2, ip
 8001b0c:	d101      	bne.n	8001b12 <__aeabi_fmul+0x13e>
 8001b0e:	0242      	lsls	r2, r0, #9
 8001b10:	d10f      	bne.n	8001b32 <__aeabi_fmul+0x15e>
 8001b12:	ea93 0f0c 	teq	r3, ip
 8001b16:	d103      	bne.n	8001b20 <__aeabi_fmul+0x14c>
 8001b18:	024b      	lsls	r3, r1, #9
 8001b1a:	bf18      	it	ne
 8001b1c:	4608      	movne	r0, r1
 8001b1e:	d108      	bne.n	8001b32 <__aeabi_fmul+0x15e>
 8001b20:	ea80 0001 	eor.w	r0, r0, r1
 8001b24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001b28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001b2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001b30:	4770      	bx	lr
 8001b32:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001b36:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8001b3a:	4770      	bx	lr

08001b3c <__aeabi_fdiv>:
 8001b3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001b40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001b44:	bf1e      	ittt	ne
 8001b46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8001b4a:	ea92 0f0c 	teqne	r2, ip
 8001b4e:	ea93 0f0c 	teqne	r3, ip
 8001b52:	d069      	beq.n	8001c28 <__aeabi_fdiv+0xec>
 8001b54:	eba2 0203 	sub.w	r2, r2, r3
 8001b58:	ea80 0c01 	eor.w	ip, r0, r1
 8001b5c:	0249      	lsls	r1, r1, #9
 8001b5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001b62:	d037      	beq.n	8001bd4 <__aeabi_fdiv+0x98>
 8001b64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001b6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001b70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001b74:	428b      	cmp	r3, r1
 8001b76:	bf38      	it	cc
 8001b78:	005b      	lslcc	r3, r3, #1
 8001b7a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001b7e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001b82:	428b      	cmp	r3, r1
 8001b84:	bf24      	itt	cs
 8001b86:	1a5b      	subcs	r3, r3, r1
 8001b88:	ea40 000c 	orrcs.w	r0, r0, ip
 8001b8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001b90:	bf24      	itt	cs
 8001b92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001b96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001b9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001b9e:	bf24      	itt	cs
 8001ba0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001ba4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001ba8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001bac:	bf24      	itt	cs
 8001bae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001bb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001bb6:	011b      	lsls	r3, r3, #4
 8001bb8:	bf18      	it	ne
 8001bba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001bbe:	d1e0      	bne.n	8001b82 <__aeabi_fdiv+0x46>
 8001bc0:	2afd      	cmp	r2, #253	; 0xfd
 8001bc2:	f63f af50 	bhi.w	8001a66 <__aeabi_fmul+0x92>
 8001bc6:	428b      	cmp	r3, r1
 8001bc8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001bcc:	bf08      	it	eq
 8001bce:	f020 0001 	biceq.w	r0, r0, #1
 8001bd2:	4770      	bx	lr
 8001bd4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001bd8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001bdc:	327f      	adds	r2, #127	; 0x7f
 8001bde:	bfc2      	ittt	gt
 8001be0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001be4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001be8:	4770      	bxgt	lr
 8001bea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	3a01      	subs	r2, #1
 8001bf4:	e737      	b.n	8001a66 <__aeabi_fmul+0x92>
 8001bf6:	f092 0f00 	teq	r2, #0
 8001bfa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001bfe:	bf02      	ittt	eq
 8001c00:	0040      	lsleq	r0, r0, #1
 8001c02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001c06:	3a01      	subeq	r2, #1
 8001c08:	d0f9      	beq.n	8001bfe <__aeabi_fdiv+0xc2>
 8001c0a:	ea40 000c 	orr.w	r0, r0, ip
 8001c0e:	f093 0f00 	teq	r3, #0
 8001c12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001c16:	bf02      	ittt	eq
 8001c18:	0049      	lsleq	r1, r1, #1
 8001c1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001c1e:	3b01      	subeq	r3, #1
 8001c20:	d0f9      	beq.n	8001c16 <__aeabi_fdiv+0xda>
 8001c22:	ea41 010c 	orr.w	r1, r1, ip
 8001c26:	e795      	b.n	8001b54 <__aeabi_fdiv+0x18>
 8001c28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001c2c:	ea92 0f0c 	teq	r2, ip
 8001c30:	d108      	bne.n	8001c44 <__aeabi_fdiv+0x108>
 8001c32:	0242      	lsls	r2, r0, #9
 8001c34:	f47f af7d 	bne.w	8001b32 <__aeabi_fmul+0x15e>
 8001c38:	ea93 0f0c 	teq	r3, ip
 8001c3c:	f47f af70 	bne.w	8001b20 <__aeabi_fmul+0x14c>
 8001c40:	4608      	mov	r0, r1
 8001c42:	e776      	b.n	8001b32 <__aeabi_fmul+0x15e>
 8001c44:	ea93 0f0c 	teq	r3, ip
 8001c48:	d104      	bne.n	8001c54 <__aeabi_fdiv+0x118>
 8001c4a:	024b      	lsls	r3, r1, #9
 8001c4c:	f43f af4c 	beq.w	8001ae8 <__aeabi_fmul+0x114>
 8001c50:	4608      	mov	r0, r1
 8001c52:	e76e      	b.n	8001b32 <__aeabi_fmul+0x15e>
 8001c54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001c58:	bf18      	it	ne
 8001c5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001c5e:	d1ca      	bne.n	8001bf6 <__aeabi_fdiv+0xba>
 8001c60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001c64:	f47f af5c 	bne.w	8001b20 <__aeabi_fmul+0x14c>
 8001c68:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001c6c:	f47f af3c 	bne.w	8001ae8 <__aeabi_fmul+0x114>
 8001c70:	e75f      	b.n	8001b32 <__aeabi_fmul+0x15e>
 8001c72:	bf00      	nop

08001c74 <__aeabi_f2uiz>:
 8001c74:	0042      	lsls	r2, r0, #1
 8001c76:	d20e      	bcs.n	8001c96 <__aeabi_f2uiz+0x22>
 8001c78:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001c7c:	d30b      	bcc.n	8001c96 <__aeabi_f2uiz+0x22>
 8001c7e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001c82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001c86:	d409      	bmi.n	8001c9c <__aeabi_f2uiz+0x28>
 8001c88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001c8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c90:	fa23 f002 	lsr.w	r0, r3, r2
 8001c94:	4770      	bx	lr
 8001c96:	f04f 0000 	mov.w	r0, #0
 8001c9a:	4770      	bx	lr
 8001c9c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001ca0:	d101      	bne.n	8001ca6 <__aeabi_f2uiz+0x32>
 8001ca2:	0242      	lsls	r2, r0, #9
 8001ca4:	d102      	bne.n	8001cac <__aeabi_f2uiz+0x38>
 8001ca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001caa:	4770      	bx	lr
 8001cac:	f04f 0000 	mov.w	r0, #0
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop

08001cb4 <memcpy>:
 8001cb4:	4684      	mov	ip, r0
 8001cb6:	ea41 0300 	orr.w	r3, r1, r0
 8001cba:	f013 0303 	ands.w	r3, r3, #3
 8001cbe:	d149      	bne.n	8001d54 <memcpy+0xa0>
 8001cc0:	3a40      	subs	r2, #64	; 0x40
 8001cc2:	d323      	bcc.n	8001d0c <memcpy+0x58>
 8001cc4:	680b      	ldr	r3, [r1, #0]
 8001cc6:	6003      	str	r3, [r0, #0]
 8001cc8:	684b      	ldr	r3, [r1, #4]
 8001cca:	6043      	str	r3, [r0, #4]
 8001ccc:	688b      	ldr	r3, [r1, #8]
 8001cce:	6083      	str	r3, [r0, #8]
 8001cd0:	68cb      	ldr	r3, [r1, #12]
 8001cd2:	60c3      	str	r3, [r0, #12]
 8001cd4:	690b      	ldr	r3, [r1, #16]
 8001cd6:	6103      	str	r3, [r0, #16]
 8001cd8:	694b      	ldr	r3, [r1, #20]
 8001cda:	6143      	str	r3, [r0, #20]
 8001cdc:	698b      	ldr	r3, [r1, #24]
 8001cde:	6183      	str	r3, [r0, #24]
 8001ce0:	69cb      	ldr	r3, [r1, #28]
 8001ce2:	61c3      	str	r3, [r0, #28]
 8001ce4:	6a0b      	ldr	r3, [r1, #32]
 8001ce6:	6203      	str	r3, [r0, #32]
 8001ce8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001cea:	6243      	str	r3, [r0, #36]	; 0x24
 8001cec:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8001cee:	6283      	str	r3, [r0, #40]	; 0x28
 8001cf0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001cf2:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001cf4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001cf6:	6303      	str	r3, [r0, #48]	; 0x30
 8001cf8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001cfa:	6343      	str	r3, [r0, #52]	; 0x34
 8001cfc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8001cfe:	6383      	str	r3, [r0, #56]	; 0x38
 8001d00:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001d02:	63c3      	str	r3, [r0, #60]	; 0x3c
 8001d04:	3040      	adds	r0, #64	; 0x40
 8001d06:	3140      	adds	r1, #64	; 0x40
 8001d08:	3a40      	subs	r2, #64	; 0x40
 8001d0a:	d2db      	bcs.n	8001cc4 <memcpy+0x10>
 8001d0c:	3230      	adds	r2, #48	; 0x30
 8001d0e:	d30b      	bcc.n	8001d28 <memcpy+0x74>
 8001d10:	680b      	ldr	r3, [r1, #0]
 8001d12:	6003      	str	r3, [r0, #0]
 8001d14:	684b      	ldr	r3, [r1, #4]
 8001d16:	6043      	str	r3, [r0, #4]
 8001d18:	688b      	ldr	r3, [r1, #8]
 8001d1a:	6083      	str	r3, [r0, #8]
 8001d1c:	68cb      	ldr	r3, [r1, #12]
 8001d1e:	60c3      	str	r3, [r0, #12]
 8001d20:	3010      	adds	r0, #16
 8001d22:	3110      	adds	r1, #16
 8001d24:	3a10      	subs	r2, #16
 8001d26:	d2f3      	bcs.n	8001d10 <memcpy+0x5c>
 8001d28:	320c      	adds	r2, #12
 8001d2a:	d305      	bcc.n	8001d38 <memcpy+0x84>
 8001d2c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d30:	f840 3b04 	str.w	r3, [r0], #4
 8001d34:	3a04      	subs	r2, #4
 8001d36:	d2f9      	bcs.n	8001d2c <memcpy+0x78>
 8001d38:	3204      	adds	r2, #4
 8001d3a:	d008      	beq.n	8001d4e <memcpy+0x9a>
 8001d3c:	07d2      	lsls	r2, r2, #31
 8001d3e:	bf1c      	itt	ne
 8001d40:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001d44:	f800 3b01 	strbne.w	r3, [r0], #1
 8001d48:	d301      	bcc.n	8001d4e <memcpy+0x9a>
 8001d4a:	880b      	ldrh	r3, [r1, #0]
 8001d4c:	8003      	strh	r3, [r0, #0]
 8001d4e:	4660      	mov	r0, ip
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	2a08      	cmp	r2, #8
 8001d56:	d313      	bcc.n	8001d80 <memcpy+0xcc>
 8001d58:	078b      	lsls	r3, r1, #30
 8001d5a:	d0b1      	beq.n	8001cc0 <memcpy+0xc>
 8001d5c:	f010 0303 	ands.w	r3, r0, #3
 8001d60:	d0ae      	beq.n	8001cc0 <memcpy+0xc>
 8001d62:	f1c3 0304 	rsb	r3, r3, #4
 8001d66:	1ad2      	subs	r2, r2, r3
 8001d68:	07db      	lsls	r3, r3, #31
 8001d6a:	bf1c      	itt	ne
 8001d6c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001d70:	f800 3b01 	strbne.w	r3, [r0], #1
 8001d74:	d3a4      	bcc.n	8001cc0 <memcpy+0xc>
 8001d76:	f831 3b02 	ldrh.w	r3, [r1], #2
 8001d7a:	f820 3b02 	strh.w	r3, [r0], #2
 8001d7e:	e79f      	b.n	8001cc0 <memcpy+0xc>
 8001d80:	3a04      	subs	r2, #4
 8001d82:	d3d9      	bcc.n	8001d38 <memcpy+0x84>
 8001d84:	3a01      	subs	r2, #1
 8001d86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d8a:	f800 3b01 	strb.w	r3, [r0], #1
 8001d8e:	d2f9      	bcs.n	8001d84 <memcpy+0xd0>
 8001d90:	780b      	ldrb	r3, [r1, #0]
 8001d92:	7003      	strb	r3, [r0, #0]
 8001d94:	784b      	ldrb	r3, [r1, #1]
 8001d96:	7043      	strb	r3, [r0, #1]
 8001d98:	788b      	ldrb	r3, [r1, #2]
 8001d9a:	7083      	strb	r3, [r0, #2]
 8001d9c:	4660      	mov	r0, ip
 8001d9e:	4770      	bx	lr

08001da0 <memset>:
 8001da0:	b470      	push	{r4, r5, r6}
 8001da2:	0784      	lsls	r4, r0, #30
 8001da4:	d046      	beq.n	8001e34 <memset+0x94>
 8001da6:	1e54      	subs	r4, r2, #1
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	d041      	beq.n	8001e30 <memset+0x90>
 8001dac:	b2cd      	uxtb	r5, r1
 8001dae:	4603      	mov	r3, r0
 8001db0:	e002      	b.n	8001db8 <memset+0x18>
 8001db2:	1e62      	subs	r2, r4, #1
 8001db4:	b3e4      	cbz	r4, 8001e30 <memset+0x90>
 8001db6:	4614      	mov	r4, r2
 8001db8:	f803 5b01 	strb.w	r5, [r3], #1
 8001dbc:	079a      	lsls	r2, r3, #30
 8001dbe:	d1f8      	bne.n	8001db2 <memset+0x12>
 8001dc0:	2c03      	cmp	r4, #3
 8001dc2:	d92e      	bls.n	8001e22 <memset+0x82>
 8001dc4:	b2cd      	uxtb	r5, r1
 8001dc6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001dca:	2c0f      	cmp	r4, #15
 8001dcc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001dd0:	d919      	bls.n	8001e06 <memset+0x66>
 8001dd2:	4626      	mov	r6, r4
 8001dd4:	f103 0210 	add.w	r2, r3, #16
 8001dd8:	3e10      	subs	r6, #16
 8001dda:	2e0f      	cmp	r6, #15
 8001ddc:	f842 5c10 	str.w	r5, [r2, #-16]
 8001de0:	f842 5c0c 	str.w	r5, [r2, #-12]
 8001de4:	f842 5c08 	str.w	r5, [r2, #-8]
 8001de8:	f842 5c04 	str.w	r5, [r2, #-4]
 8001dec:	f102 0210 	add.w	r2, r2, #16
 8001df0:	d8f2      	bhi.n	8001dd8 <memset+0x38>
 8001df2:	f1a4 0210 	sub.w	r2, r4, #16
 8001df6:	f022 020f 	bic.w	r2, r2, #15
 8001dfa:	f004 040f 	and.w	r4, r4, #15
 8001dfe:	3210      	adds	r2, #16
 8001e00:	2c03      	cmp	r4, #3
 8001e02:	4413      	add	r3, r2
 8001e04:	d90d      	bls.n	8001e22 <memset+0x82>
 8001e06:	461e      	mov	r6, r3
 8001e08:	4622      	mov	r2, r4
 8001e0a:	3a04      	subs	r2, #4
 8001e0c:	2a03      	cmp	r2, #3
 8001e0e:	f846 5b04 	str.w	r5, [r6], #4
 8001e12:	d8fa      	bhi.n	8001e0a <memset+0x6a>
 8001e14:	1f22      	subs	r2, r4, #4
 8001e16:	f022 0203 	bic.w	r2, r2, #3
 8001e1a:	3204      	adds	r2, #4
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f004 0403 	and.w	r4, r4, #3
 8001e22:	b12c      	cbz	r4, 8001e30 <memset+0x90>
 8001e24:	b2c9      	uxtb	r1, r1
 8001e26:	441c      	add	r4, r3
 8001e28:	f803 1b01 	strb.w	r1, [r3], #1
 8001e2c:	42a3      	cmp	r3, r4
 8001e2e:	d1fb      	bne.n	8001e28 <memset+0x88>
 8001e30:	bc70      	pop	{r4, r5, r6}
 8001e32:	4770      	bx	lr
 8001e34:	4614      	mov	r4, r2
 8001e36:	4603      	mov	r3, r0
 8001e38:	e7c2      	b.n	8001dc0 <memset+0x20>
 8001e3a:	bf00      	nop
